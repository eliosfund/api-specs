openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Elios Fund API'
  description: The Elios Fund API provides a robust interface for partners to integrate and access the most powerful financing options in solar today.
  contact:
    name: Elios Fund Engineering
    url: https://portal.support.eliosfund.com
    email: engineering@eliosfund.com

externalDocs:
  url: https://partners.eliosfund.com
  description: Manage your Elios Fund API keys and OAuth 2.0 clients.

servers:
  - url: https://api.eliosfund.com
    description: All requests should be directed to the production environment.
  - url: https://api.uat.eliosfund.com
    description: For access to the UAT environment, please contact Elios Fund support.
  - url: https://api.staging.eliosfund.com
    description: For access to the staging environment, please contact Elios Fund support.

paths:
  /action-items/{actionItemId}/attachments:
    parameters:
      - name: actionItemId
        description: The unique identifier of the action item.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AttachmentId'
    get:
      summary: Get action item attachments
      description: Returns all the current action item attachments.
      security:
        - ApiKey:
            - view:attachments
        - OAuth:
            - view:attachments
      responses:
        200:
          description: The action item attachments.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/AttachmentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /action-items/{actionItemId}/comments:
    parameters:
      - name: actionItemId
        description: The unique identifier of the action item.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ActionItemId'
    get:
      summary: Get action item comments
      description: Returns all the current action item comments.
      security:
        - ApiKey:
            - view:comments
        - OAuth:
            - view:comments
      responses:
        200:
          description: The action item comments.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CommentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications:
    get:
      summary: Get all qualification applications
      description: Returns all available qualification applications.
      security:
        - ApiKey:
            - view:applications
        - OAuth:
            - view:applications
      responses:
        200:
          description: All qualification applications assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a qualification application
      description: Start a new qualification application.
      security:
        - ApiKey:
            - create:applications
        - OAuth:
            - create:applications
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/ApplicationCreate"
      responses:
        201:
          description: The new qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Application'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}:
    parameters:
      - name: applicationId
        description: The unique identifier of the qualification application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
    get:
      summary: Get a qualification application
      description: Returns all available information about a single qualification application.
      security:
        - ApiKey:
            - view:applications
        - OAuth:
            - view:applications
      responses:
        200:
          description: The requested qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Application'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/ach:
    parameters:
      - name: applicationId
        description: The unique identifier of the qualification application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
    get:
      summary: Check ACH authorization
      description: Checks if the ACH authorization form has been completed by the customer. The ACH authorization can be completed using two seperate methods; either by API/Plaid or forwarding the customer to a website. Forward the customer to the `achAuthorizationUrl` to use the web version or initialize Plaid Link using the `plaidLinkToken` for the API version.
      security:
        - ApiKey:
            - view:applications
        - OAuth:
            - view:applications
      responses:
        200:
          description: The requested qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationAch'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ACH authorization
      description: Creates a new ACH authorization for the qualification application. This method involves using Plaid Link. You may also create an ACH authorization using a website. Use the `GET /applications/{applicationId}/ach` endpoint to forward the customer to the `achAuthorizationUrl` if you prefer the web version.
      security:
        - ApiKey:
            - update:applications
        - OAuth:
            - update:applications
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/AchAuthorizationCreate"
      responses:
        201:
          description: The new ACH authorization.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/AchAuthorization'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/open:
    parameters:
      - name: applicationId
        description: The unique identifier of the qualification application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
    patch:
      summary: Open a qualification application
      description: Reopens a qualification application. The application must be in a `submitted`, `approved`, or `declined` state in order to be reopened. The qualification application will need to be submitted once again before a qualification check can happen.
      security:
        - ApiKey:
            - update:applications
        - OAuth:
            - update:applications
      responses:
        200:
          description: The current qualification application status.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationOpen'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/qualify:
    parameters:
      - name: applicationId
        description: The unique identifier of the qualification application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
    get:
      summary: Run a qualification application check
      description: Runs the necessary processes to check the qualification status of an application. The application must be in a `submitted` state in order to run the qualification checks. While this process is not immediate, but often finishes within a minute, one should either listen to a webhook event or poll the `GET` endpoint to check the status of the application. The status of the application will turn from `in_progress` to either `approved` or `declined` once the qualification check finishes.
      security:
        - ApiKey:
            - qualify:applications
        - OAuth:
            - qualify:applications
      responses:
        200:
          description: The current qualification application status.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationQualify'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/submit:
    parameters:
      - name: applicationId
        description: The unique identifier of the qualification application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
    patch:
      summary: Submit a qualification application
      description: Submits a qualification application and changes the status from `open` to `submitted`. A qualification application cannot be edited in the `submitted` state and may only transition to the `submitted` state from the `open` state. This is necessary before a qualification check can run.
      security:
        - ApiKey:
            - update:applications
        - OAuth:
            - update:applications
      responses:
        200:
          description: The current qualification application status.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationSubmit'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /attachments/{attachmentId}:
    parameters:
      - name: attachmentId
        description: The unique identifier of the attachment.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AttachmentId'
    get:
      summary: Get an attachment
      description: Returns all available information about a single attachment.
      security:
        - ApiKey:
            - view:attachments
        - OAuth:
            - view:attachments
      responses:
        200:
          description: The attachment corresponding to the provided `attachmentId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Attachment'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /comments/{commentId}:
    parameters:
      - name: commentId
        description: The unique identifier of the comment.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CommentId'
    get:
      summary: Get a comment
      description: Returns all available information about a single comment.
      security:
        - ApiKey:
            - view:comments
        - OAuth:
            - view:comments
      responses:
        200:
          description: The comment corresponding to the provided `commentId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Comment'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /dealers:
    get:
      summary: Get all dealers
      description: Returns all available dealers.
      security:
        - ApiKey:
            - view:dealers
        - OAuth:
            - view:dealers
      responses:
        200:
          description: All dealers assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DealerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /dealers/{dealerId}:
    parameters:
      - name: dealerId
        description: The unique identifier of the dealer.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DealerId'
    get:
      summary: Get a dealer
      description: Returns all available information about a single dealer.
      security:
        - ApiKey:
            - view:dealers
        - OAuth:
            - view:dealers
      responses:
        200:
          description: The dealers corresponding to the provided `dealerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Dealer'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /distributors:
    get:
      summary: Get all distributors
      description: Returns all available distributors.
      security:
        - ApiKey:
            - view:distributors
        - OAuth:
            - view:distributors
      responses:
        200:
          description: All distributors assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DistributorCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /distributors/{distributorId}:
    parameters:
      - name: distributorId
        description: The unique identifier of the distributor.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DistributorId'
    get:
      summary: Get a distributor
      description: Returns all available information about a single distributor.
      security:
        - ApiKey:
            - view:distributors
        - OAuth:
            - view:distributors
      responses:
        200:
          description: The distributor corresponding to the provided `distributorId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Distributor'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /installers:
    get:
      summary: Get all installers
      description: Returns all available installers.
      security:
        - ApiKey:
            - view:installers
        - OAuth:
            - view:installers
      responses:
        200:
          description: All installers assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/InstallerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /installers/{installerId}:
    parameters:
      - name: installerId
        description: The unique identifier of the installer.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InstallerId'
    get:
      summary: Get an installer
      description: Returns all available information about a single installer.
      security:
        - ApiKey:
            - view:installers
        - OAuth:
            - view:installers
      responses:
        200:
          description: The installer corresponding to the provided `installerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Installer'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl:
    get:
      summary: Get all products
      description: Returns all available product options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All available products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl/batteries:
    get:
      summary: Get all battery products
      description: Returns all available battery options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All battery products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl/inverters:
    get:
      summary: Get all inverter products
      description: Returns all available inverter options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All inverter products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl/modules:
    get:
      summary: Get all module products
      description: Returns all available module options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All module products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl/racking:
    get:
      summary: Get all racking products
      description: Returns all available racking options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All racking products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    get:
      summary: Get all projects
      description: Returns all available projects.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: All projects assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProjectCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a project
      description: Start a new project.
      security:
        - ApiKey:
            - create:projects
        - OAuth:
            - create:projects
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      responses:
        201:
          description: The new project.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get a project
      description: Returns all available information about a single project.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: The project corresponding to the provided `projectId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}/action-items:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get project action items
      description: Returns all the current project action items.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: The project action items.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ActionItemCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}/attachments:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get project attachments
      description: Returns all the current project attachments.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: The project attachments.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/AttachmentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a project attachment(s)
      description: Adds new attachments to the project. The key of each file should be a valid `AttachmentType`.
      security:
        - ApiKey:
            - update:projects
        - OAuth:
            - update:projects
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AttachmentCreate"
      responses:
        201:
          description: The new attachment.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/AttachmentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}/comments:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get project comments
      description: Returns all the current project comments.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: The project comments.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CommentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /partners:
    get:
      summary: Get all partners
      description: Returns all available partners.
      security:
        - ApiKey:
            - view:partners
        - OAuth:
            - view:partners
      responses:
        200:
          description: All partners assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PartnerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /partners/{partnerId}:
    parameters:
      - name: partnerId
        description: The unique identifier of the partner.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PartnerId'
    get:
      summary: Get a partner
      description: Returns all available information about a single partner.
      security:
        - ApiKey:
            - view:partners
        - OAuth:
            - view:partners
      responses:
        200:
          description: The partner corresponding to the provided `partnerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Partner'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /webhooks:
    get:
      summary: Get all webhooks
      description: Returns all available webhooks.
      security:
        - ApiKey:
            - manage:webhooks
        - OAuth:
            - manage:webhooks
      responses:
        200:
          description: All webhooks assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/WebhookCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    AchAuthorization:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/AchAuthorizationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: AchAuthorization
        id:
          $ref: '#/components/schemas/AchAuthorizationId'
        fullName:
          type: string
          description: The customer's full name.
        email:
          type: string
          format: email
          description: The customer's email.
        phoneNumber:
          type: string
          format: tel
          description: The customer's phone number.
        status:
          readOnly: true
          $ref: '#/components/schemas/ApplicationAchStatus'
    AchAuthorizationCreate:
      type: object
      required:
        - fullName
        - email
        - phoneNumber
        - plaidPublicToken
      properties:
        fullName:
          type: string
          description: The customer's full name.
        email:
          type: string
          format: email
          description: The customer's email.
        phoneNumber:
          type: string
          format: tel
          description: The customer's phone number.
        plaidPublicToken:
          type: string
          description: The Plaid public token.
    AchAuthorizationId:
      description: The unique identifier of an ACH authorization.
      type: integer
    AchAuthorizationIri:
      description: The unique JSON-LD IRI reference to the ACH authorization.
      type: string
      format: iri-reference
      example: '/ach-authorizations/1'
    ActionItem:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ActionItemIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: ActionItem
        id:
          $ref: '#/components/schemas/ActionItemId'
        title:
          type: string
          description: The title of the action item.
        description:
          type: string
          description: The main action item content.
        priority:
          description: The action item priority.
          type: string
          enum:
            - low
            - medium
            - high
            - critical
        status:
          description: The action item status.
          type: string
          enum:
            - open
            - in_review
            - needs_corrections
            - hold
            - complete
        dueAt:
          description: The action item due date, if applicable.
          type: string
          format: date-time
        createdAt:
          description: The date the action item was created.
          type: string
          format: date-time
        updatedAt:
          description: The date the action item was last updated.
          type: string
          format: date-time
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentIri'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentIri'
    ActionItemCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/ActionItem"
            "@id":
              example: "/action-items"
            totalItems:
              type: integer
              description: The total number of action items.
              example: 5
            member:
              type: array
              description: A list of action items.
              items:
                $ref: '#/components/schemas/ActionItem'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/action-items?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/action-items?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/action-items?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/action-items?page=2"
    ActionItemId:
      description: The unique identifier of an action item.
      type: integer
    ActionItemIri:
      description: The unique JSON-LD IRI reference to the action item.
      type: string
      format: iri-reference
      example: '/action-items/1'
    AdderId:
      description: The unique identifier of an adder.
      type: integer
    AdderIri:
      description: The unique JSON-LD IRI reference to the adder.
      type: string
      format: iri-reference
      example: '/adders/1'
    Adder:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/AdderIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Adder
        id:
          $ref: '#/components/schemas/AdderId'
        name:
          type: string
        quantity:
          type: integer
        subtotal:
          type: number
    Address:
      type: object
      allOf:
        - $ref: '#/components/schemas/AddressCreate'
      properties:
        "@id":
          $ref: '#/components/schemas/AddressIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Address
        id:
          $ref: '#/components/schemas/AddressId'
        street:
          type: string
        address:
          description: A formatted address string.
          type: string
        lat:
          description: The address latitude coordinate.
          type: number
        lng:
          description: The address longitude coordinates.
          type: number
    AddressCreate:
      type: object
      required:
        - streetNumber
        - streetName
        - city
        - state
        - postCode
        - country
      properties:
        streetNumber:
          type: string
        streetName:
          type: string
        city:
          type: string
          maxLength: 60
          minLength: 3
        state:
          type: string
          maxLength: 2
          minLength: 2
        postCode:
          type: integer
          maxLength: 5
          minLength: 5
        country:
          type: string
          default: USA
          maxLength: 3
          minLength: 3
    AddressId:
      description: The unique identifier of an address.
      type: integer
    AddressIri:
      description: The unique JSON-LD IRI reference to the address.
      type: string
      format: iri-reference
      example: '/addresses/1'
    Application:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApplicationDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        primaryApplicant:
          $ref: '#/components/schemas/ApplicationApplicant'
        coApplicant:
          $ref: '#/components/schemas/ApplicationApplicant'
        creditReportTier:
          description: The highest credit report tier between both applicants.
          type: string
          enum:
            - declined
            - diamond
            - platinum
            - gold
            - silver
            - bronze
            - mercury
        status:
          $ref: '#/components/schemas/ApplicationStatus'
        team:
          type: object
          description: The team handling the proposed project.
          properties:
            dealer:
              description: The dealer handling the qualification application.
              $ref: '#/components/schemas/Dealer'
            installer:
              description: The installer handling the qualification application.
              $ref: '#/components/schemas/Installer'
            user:
              description: The sales rep handling the qualification application.
              $ref: '#/components/schemas/SalesRep'
        externalIdentifiers:
          type: array
          description: A list of external identifiers for the qualification application.
          items:
            $ref: '#/components/schemas/ExternalIdentifier'
    ApplicationAch:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        achAuthorizationStatus:
          $ref: '#/components/schemas/ApplicationAchStatus'
        achAuthorizationUrl:
          type: string
          format: uri
          description: A URL to complete the customer ACH authorization process.
        plaidLinkToken:
          type: string
          description: A token that can be used to initialize Plaid Link.
        achAuthorizationConsentHtml:
          type: string
          description: A consent that should be showed to the customer prior to ACH authorization in HTML.
        achAuthorizationConsentMarkdown:
          type: string
          description: A consent that should be showed to the customer prior to ACH authorization in markdown.
    ApplicationAchStatus:
      description: The customer qualification ACH authorization status.
      type: string
      enum:
        - complete
        - incomplete
    ApplicationAgreementType:
      description: The type of agreement being used.
      type: string
      enum:
        - ppa
        - lease
        - loan
    ApplicationAddress:
      type: object
      properties:
        streetNumber:
          type: string
          format: numeric
        streetName:
          type: string
        city:
          type: string
          minimum: 3
          maximum: 60
        state:
          type: string
          minimum: 2
          maximum: 2
        postCode:
          type: string
          format: numeric
          minimum: 5
          maximum: 5
        country:
          type: string
          format: numeric
          minimum: 3
          maximum: 3
    ApplicationApplicant:
      description: The demographics of a qualification applicant.
      type: object
      properties:
        firstName:
          description: The first name of the applicant.
          type: string
        middleName:
          description: An optional middle name of the applicant.
          type: string
          nullable: true
        lastName:
          description: The last name of the applicant.
          type: string
        email:
          description: The email of the applicant.
          type: string
          format: email
        dateOfBirth:
          description: The date of birth of the applicant.
          type: string
          format: date
        ssn:
          description: The last 4 digits of the applicant\'s social security number.
          type: string
          format: numeric
          maxLength: 4
          minLength: 4
        mobilePhone:
          description: The mobile phone number of the applicant.
          type: string
          format: tel
          pattern: ^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$
        homePhone:
          description: An optional home phone number of the applicant.
          type: string
          format: tel
          nullable: true
        currentAddress:
          description: The current home address of the applicant.
          $ref: '#/components/schemas/ApplicationAddress'
        previousAddress:
          description: If the applicant has not lived at their current address for more than two years, their previous home address.
          $ref: '#/components/schemas/ApplicationAddress'
          nullable: true
    ApplicationCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Application"
            "@id":
              example: "/applications"
            totalItems:
              type: integer
              description: The total number of qualification applications.
              example: 5
            member:
              type: array
              description: A list of qualification applications.
              items:
                $ref: '#/components/schemas/Application'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/applications?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/applications?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/applications?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/applications?page=2"
    ApplicationCreate:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApplicationDetails'
        - type: object
          required:
            - primaryApplicant
            - agreementType
            - productType
            - consent1
            - consent2
            - consent3
          properties:
            primaryApplicant:
              $ref: "#/components/schemas/ApplicationApplicant"
            coApplicant:
              $ref: "#/components/schemas/ApplicationApplicant"
            dealer:
              description: The dealer responsible for the qualification application. Either the `dealer` or `dealerId` must be provided.
              allOf:
                - $ref: "#/components/schemas/DealerCreate"
              nullable: true
            dealerId:
              description: The unique identifier of the dealer.
              type: integer
              nullable: true
            installer:
              description: The installer responsible for the qualification application. Either the `installer` or `installerId` must be provided.
              allOf:
                - $ref: "#/components/schemas/InstallerCreate"
              nullable: true
            installerId:
              description: The unique identifier of the installer.
              type: integer
              nullable: true
            user:
              description: The sales rep responsible for the project. Either the `user` or `userId` must be provided.
              allOf:
                - $ref: "#/components/schemas/UserCreate"
              nullable: true
            userId:
              description: The unique identifier of the sales rep.
              type: integer
              nullable: true
            consent1:
              description: Whether or not the customer agrees to the first consent.
              type: boolean
            consent2:
              description: Whether or not the customer agrees to the second consent.
              type: boolean
            consent3:
              description: Whether or not the customer agrees to the third consent.
              type: boolean
            externalId:
              description: Optional external identifiers to add to the application.
              type: array
              items:
                $ref: "#/components/schemas/ExternalIdentifierCreate"
    ApplicationDetails:
      type: object
      properties:
        referenceId:
          description: An optional application reference ID such as the proposal ID.
          type: string
          nullable: true
        agreementType:
          $ref: '#/components/schemas/ApplicationAgreementType'
        productType:
          $ref: '#/components/schemas/ApplicationProductType'
    ApplicationId:
      description: The unique identifier of a qualification application.
      type: integer
    ApplicationIri:
      description: The unique JSON-LD IRI reference to the qualification application.
      type: string
      format: iri-reference
      example: '/applications/1'
    ApplicationOpen:
      type: object
      properties:
        "@context":
          example: "/contexts/Application"
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: "#/components/schemas/ApplicationStatus"
          default: open
    ApplicationProductType:
      description: The type of product the customer is receiving.
      type: string
      enum:
        - solar
        - solar_storage
        - solar_storage_other
        - solar_other
        - storage
    ApplicationStatus:
      description: The customer qualification application status.
      type: string
      enum:
        - open
        - in_progress
        - submitted
        - approved
        - declined
        - none
        - onhold
        - cancelled
    ApplicationSubmit:
      type: object
      properties:
        "@context":
          example: "/contexts/Application"
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: "#/components/schemas/ApplicationStatus"
    ApplicationQualify:
      type: object
      properties:
        "@context":
          example: "/contexts/Application"
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: "#/components/schemas/ApplicationStatus"
          default: in_progress
    Attachment:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/AttachmentIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Attachment
        id:
          $ref: '#/components/schemas/AttachmentId'
        name:
          type: string
          description: The name of the attachment.
        type:
          type: string
          description: The type of attachment.
          $ref: "#/components/schemas/AttachmentType"
        mime:
          type: string
          description: The attachment mime type.
        size:
          type: integer
          description: The size of the attachment in bytes.
        url:
          type: string
          format: uri
          description: A protected URL to download/view the attachment. All URLs will expire after a set amount of time.
        source:
          type: string
          description: The attachment source.
          $ref: "#/components/schemas/AttachmentSource"
    AttachmentCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Attachment"
            "@id":
              example: "/attachments"
            totalItems:
              type: integer
              description: The total number of attachments.
              example: 5
            member:
              type: array
              description: A list of attachments.
              items:
                $ref: '#/components/schemas/Attachment'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/attachments?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/attachments?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/attachments?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/attachments?page=2"
    AttachmentCreate:
      type: object
      additionalProperties:
        type: string
        format: binary
      description: >
        The key of each file should be a valid `AttachmentType`.
        Each key represents one file to upload.
    AttachmentId:
      description: The unique identifier of an attachment.
      type: integer
    AttachmentIri:
      description: The unique JSON-LD IRI reference to the attachment.
      type: string
      format: iri-reference
      example: '/attachments/1'
    AttachmentSource:
      description: The location the attachment was provided from.
      type: string
      enum:
        - api
        - scanifly
        - sunobi
        - smithai
        - manual
    AttachmentType:
      description: The type of attachment.
      type: string
      enum:
        - ach_authorization
        - bom
        - contract
        - cpuc
        - credit_report
        - design
        - electrical_panel
        - final_inspection
        - install
        - interconnection
        - miscellaneous
        - monitoring
        - m1_verification_form
        - m2_verification_form
        - m3_verification_form
        - m4_verification_form
        - nem
        - other
        - permit
        - plan_set
        - procurement
        - property_document
        - pto
        - site_survey_photo
        - title_verification
        - true_up
        - ucc_filing
        - unknown
        - utility_bill
        - verification_call
    Comment:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/CommentIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Comment
        id:
          $ref: '#/components/schemas/CommentId'
        comment:
          description: The main comment content.
          type: string
        user:
          description: The comment's author.
          type: object
          allOf:
            - $ref: '#/components/schemas/Customer'
    CommentCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Comment"
            "@id":
              example: "/comments"
            totalItems:
              type: integer
              description: The total number of comments.
              example: 5
            member:
              type: array
              description: A list of comments.
              items:
                $ref: '#/components/schemas/Comment'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/comments?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/comments?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/comments?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/comments?page=2"
    CommentId:
      description: The unique identifier of a comment.
      type: integer
    CommentIri:
      description: The unique JSON-LD IRI reference to the comment.
      type: string
      format: iri-reference
      example: '/comments/1'
    CustomerIri:
      description: The unique JSON-LD IRI reference to the customer.
      type: string
      format: iri-reference
      example: '/customers/1'
    Customer:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/UserIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: User
        id:
          $ref: '#/components/schemas/UserId'
        name:
          description: The user's full name.
          type: string
    Dealer:
      type: object
      allOf:
        - $ref: '#/components/schemas/DealerDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/DealerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Dealer
        id:
          $ref: '#/components/schemas/DealerId'
        website:
          description: The dealer's website.
          type: string
          format: uri
        logoUrl:
          description: The dealer's logo.
          type: string
          format: uri
    DealerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Dealer"
            "@id":
              example: "/dealers"
            totalItems:
              type: integer
              description: The total number of dealers.
              example: 5
            member:
              type: array
              description: A list of dealers.
              items:
                $ref: '#/components/schemas/Dealer'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/dealers?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/dealers?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/dealers?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/dealers?page=2"
    DealerCreate:
      type: object
      required:
        - name
        - email
      allOf:
        - $ref: '#/components/schemas/DealerDetails'
      properties:
        externalId:
          description: Optional external identifiers to add to the dealer.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    DealerDetails:
      type: object
      properties:
        name:
          description: The name of the dealer.
          type: string
        email:
          description: A contact email for the dealer.
          type: string
          format: email
    DealerId:
      description: The unique identifier of a dealer.
      type: integer
    DealerIri:
      description: The unique JSON-LD IRI reference to the dealer.
      type: string
      format: iri-reference
      example: '/dealers/1'
    Design:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/DesignIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Design
        id:
          $ref: '#/components/schemas/DesignId'
        name:
          description: The name of the design.
          type: string
        systemSize:
          description: The size of the system is kW.
          type: number
        systemOffset:
          description: The system offset percentage.
          type: number
        asa:
          description: The system annular solar access.
          type: number
        annualProduction:
          description: The system production in kWh.
          type: number
        isPrimary:
          description: Whether or not this design is the primary design.
          type: boolean
        segments:
          description: A list of the design segments/arrays.
          type: array
          items:
            $ref: '#/components/schemas/Segment'
    DesignId:
      description: The unique identifier of a design.
      type: integer
    DesignIri:
      description: The unique JSON-LD IRI reference to the design.
      type: string
      format: iri-reference
      example: '/designs/1'
    Distributor:
      type: object
      allOf:
        - $ref: '#/components/schemas/DistributorDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/DistributorIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Distributor
        id:
          $ref: '#/components/schemas/DistributorId'
        website:
          description: The distributor's website.
          type: string
          format: uri
        logoUrl:
          description: The distributor's logo.
          type: string
          format: uri
    DistributorCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Distributor"
            "@id":
              example: "/distributors"
            totalItems:
              type: integer
              description: The total number of distributors.
              example: 5
            member:
              type: array
              description: A list of distributors.
              items:
                $ref: '#/components/schemas/Distributor'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/distributors?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/distributors?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/distributors?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/distributors?page=2"
    DistributorCreate:
      type: object
      required:
        - name
        - email
      allOf:
        - $ref: '#/components/schemas/DistributorDetails'
      properties:
        externalId:
          description: Optional external identifiers to add to the distributor.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    DistributorDetails:
      type: object
      properties:
        name:
          description: The name of the distributor.
          type: string
        email:
          description: A contact email for the distributor.
          type: string
          format: email
    DistributorId:
      description: The unique identifier of a distributor.
      type: integer
    DistributorIri:
      description: The unique JSON-LD IRI reference to the distributor.
      type: string
      format: iri-reference
      example: '/distributors/1'
    Error:
      type: object
      properties:
        type:
          description: The IRI reference.
          type: string
          format: iri-reference
          example: '/errors/401'
        title:
          description: A human readable error message.
          type: string
        status:
          description: The HTTP status code.
          type: integer
        detail:
          description: More detailed error information.
          type: string
    ExternalIdentifierId:
      description: The unique identifier of an external identifier.
      type: integer
    ExternalIdentifier:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExternalIdentifierDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/ExternalIdentifierIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: ExternalIdentifier
        id:
          $ref: '#/components/schemas/ExternalIdentifierId'
    ExternalIdentifierCreate:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExternalIdentifierDetails'
      required:
        - key
        - value
    ExternalIdentifierDetails:
      type: object
      properties:
        key:
          type: string
          description: The key of the external identifier.
        value:
          type: string
          description: The value of the external identifier.
    ExternalIdentifierIri:
      description: The unique JSON-LD IRI reference to the external identifier.
      type: string
      format: iri-reference
      example: '/external-identifiers/1'
    HydraCollectionMetadata:
      type: object
      properties:
        "@context":
          type: string
          description: The JSON-LD context.
        "@id":
          type: string
          description: The JSON-LD unique IRI for the collection.
        "@type":
          type: string
          description: The JSON-LD type of the collection.
          example: Collection
    HydraView:
      type: object
      properties:
        "@id":
          type: string
          description: The identifier of the paginated view.
        "@type":
          type: string
          description: The JSON-LD type of the view.
          example: "PartialCollectionView"
        first:
          type: string
          description: The first page of the collection.
        last:
          type: string
          description: The last page of the collection.
        next:
          type: string
          description: The next page of the collection (if available).
    Installer:
      type: object
      allOf:
        - $ref: '#/components/schemas/InstallerDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/InstallerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Installer
        id:
          $ref: '#/components/schemas/InstallerId'
        website:
          description: The installer's website.
          type: string
          format: uri
        logoUrl:
          description: The installer's logo.
          type: string
          format: uri
    InstallerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Installer"
            "@id":
              example: "/installers"
            totalItems:
              type: integer
              description: The total number of installers.
              example: 5
            member:
              type: array
              description: A list of installers.
              items:
                $ref: '#/components/schemas/Installer'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/installers?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/installers?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/installers?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/installers?page=2"
    InstallerCreate:
      type: object
      required:
        - name
        - email
      allOf:
        - $ref: '#/components/schemas/InstallerDetails'
      properties:
        externalId:
          description: Optional external identifiers to add to the installer.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    InstallerDetails:
      type: object
      properties:
        name:
          description: The name of the installer.
          type: string
        email:
          description: A contact email for the installer.
          type: string
          format: email
    InstallerId:
      description: The unique identifier of an installer.
      type: integer
    InstallerIri:
      description: The unique JSON-LD IRI reference to the installer.
      type: string
      format: iri-reference
      example: '/installers/1'
    Manufacturer:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ManufacturerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Manufacturer
        id:
          $ref: '#/components/schemas/ManufacturerId'
        name:
          description: The name of the manufacturer.
          type: string
    ManufacturerId:
      description: The unique identifier of a manufacturer.
      type: integer
    ManufacturerIri:
      description: The unique JSON-LD IRI reference to the manufacturer.
      type: string
      format: iri-reference
      example: '/manufacturers/1'
    Partner:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/PartnerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Partner
        id:
          $ref: '#/components/schemas/PartnerId'
        name:
          description: The name of the partner.
          type: string
        email:
          description: A contact email for the partner.
          type: string
          format: email
        website:
          description: The partner's website.
          type: string
          format: uri
    PartnerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Partner"
            "@id":
              example: "/partners"
            totalItems:
              type: integer
              description: The total number of partners.
              example: 5
            member:
              type: array
              description: A list of partners.
              items:
                $ref: '#/components/schemas/Partner'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/partners?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/partners?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/partners?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/partners?page=2"
    PartnerId:
      description: The unique identifier of a partner.
      type: integer
    PartnerIri:
      description: The unique JSON-LD IRI reference to the partner.
      type: string
      format: iri-reference
      example: '/partners/1'
    Product:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ProductIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Product
        id:
          $ref: '#/components/schemas/ProductId'
        type:
          description: The type of product.
          type: string
          enum:
            - battery
            - inverter
            - miscellaneous
            - module
            - other
            - racking
            - roofing
        name:
          description: The name of the product.
          type: string
        description:
          description: A description of the product.
          type: string
        sku:
          description: The product SKU.
          type: string
        distributors:
          description: The distributors who offer this product.
          type: array
          items:
            $ref: "#/components/schemas/Distributor"
        manufacturer:
          description: The product manufacturer.
          type: object
          allOf:
            - $ref: '#/components/schemas/Manufacturer'
    ProductCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Product"
            "@id":
              example: "/products"
            totalItems:
              type: integer
              description: The total number of products.
              example: 5
            member:
              type: array
              description: A list of products.
              items:
                $ref: '#/components/schemas/Product'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/products?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/products?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/products?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/products?page=2"
            search:
              type: object
              description: Search parameters for filtering the product collection.
              properties:
                "@type":
                  type: string
                  example: "IriTemplate"
                template:
                  type: string
                  example: "/products/avl{?name,type}"
                variableRepresentation:
                  type: string
                  example: "BasicRepresentation"
                mapping:
                  type: array
                  items:
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: "IriTemplateMapping"
                      variable:
                        type: string
                      property:
                        type: string
    ProductId:
      description: The unique identifier of a product.
      type: integer
    ProductIri:
      description: The unique JSON-LD IRI reference to the product.
      type: string
      format: iri-reference
      example: '/products/1'
    Project:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ProjectIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Project
        id:
          $ref: '#/components/schemas/ProjectId'
        proposalId:
          $ref: '#/components/schemas/ProjectProposalId'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        phase:
          $ref: '#/components/schemas/ProjectPhase'
        milestone:
          $ref: '#/components/schemas/ProjectMilestone'
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatus'
        productType:
          $ref: '#/components/schemas/ApplicationProductType'
        financials:
          description: The project financials.
          type: object
          properties:
            agreementType:
              $ref: '#/components/schemas/ApplicationAgreementType'
            totalContractValue:
              description: The total contract price.
              type: number
            totalAdderValue:
              description: The total price of all adders.
              type: number
            amountFinanced:
              description: The amount financed by the customer.
              type: number
            monthlyPayment:
              description: The first year monthly payment.
              type: number
            m2PaymentAmount:
              description: The M2 payment amount.
              type: number
            m3PaymentAmount:
              description: The M3 payment amount.
              type: number
            downPayment:
              description: The down payment required.
              type: number
            introductoryTerm:
              description: Only applicable if the agreement type is a loan.
              type: number
            introductoryPayment:
              description: Only applicable if the agreement type is a loan.
              type: number
            dealerFee:
              description: Only applicable if the agreement type is a loan.
              type: number
            apr:
              description: The escalator if a PPA or lease. The interest rate if a loan.
              type: number
            term:
              description: The agreement term length.
              type: number
            contractRate:
              description: The $/kWh price.
              type: number
            basePpw:
              description: The price per watt of the PV system.
              type: number
            federalRebate:
              type: number
            stateRebase:
              type: number
            utilityRebate:
              type: number
        milestones:
          description: The project milestones.
          type: object
          properties:
            m1:
              type: object
              properties:
                m1ReviewedAt:
                  type: string
                  format: date
                m1ApprovedAt:
                  type: string
                  format: date
                initialReviewStartedAt:
                  type: string
                  format: date
                initialReviewApprovedAt:
                  type: string
                  format: date
                agreementSignedAt:
                  type: string
                  format: date
                changeOrderAt:
                  type: string
                  format: date
                siteSurveyCompletedAt:
                  type: string
                  format: date
                ntpStartedAt:
                  type: string
                  format: date
                ntpCompletedAt:
                  type: string
                  format: date
                procurementApprovedAt:
                  type: string
                  format: date
                procurementPaymentSentAt:
                  type: string
                  format: date
                procurementShippedAt:
                  type: string
                  format: date
                procurementDeliveredAt:
                  type: string
                  format: date
                uccFiledAt:
                  type: string
                  format: date
                permitSubmittedAt:
                  type: string
                  format: date
                permitApprovedAt:
                  type: string
                  format: date
            m2:
              type: object
              properties:
                m2ReviewedAt:
                  type: string
                  format: date
                m2ApprovedAt:
                  type: string
                  format: date
                m2PaymentReady:
                  type: boolean
                m2PaymentSentAt:
                  type: string
                  format: date
                installScheduledAt:
                  type: string
                  format: date
                installCompletedAt:
                  type: string
                  format: date
            m3:
              type: object
              properties:
                m3ReviewedAt:
                  type: string
                  format: date
                m3ApprovedAt:
                  type: string
                  format: date
                m3PaymentReady:
                  type: boolean
                m3PaymentSentAt:
                  type: string
                  format: date
                finalInspectionScheduledAt:
                  type: string
                  format: date
                finalInspectionCompletedAt:
                  type: string
                  format: date
                ptoAt:
                  type: string
                  format: date
                startBillingAt:
                  type: string
                  format: date
        proposalLink:
          description: The link to the project proposal.
          type: string
        proposalDate:
          description: The date the proposal was generated.
          type: string
          format: date
        createdAt:
          description: The date the project was created.
          type: string
          format: date-time
        updatedAt:
          description: The date the project was last updated.
          type: string
          format: date-time
        address:
          description: The project address.
          type: object
          allOf:
            - $ref: '#/components/schemas/Address'
        design:
          description: The project's current primary design.
          type: object
          allOf:
            - $ref: '#/components/schemas/Design'
        customer:
          description: The project's customer.
          type: object
          allOf:
            - $ref: '#/components/schemas/Customer'
        dealer:
          description: The project's dealer.
          type: object
          allOf:
            - $ref: '#/components/schemas/Dealer'
        distributor:
          description: The project's distributor.
          type: object
          allOf:
            - $ref: '#/components/schemas/Distributor'
        installer:
          description: The project's distributor.
          type: object
          allOf:
            - $ref: '#/components/schemas/Installer'
        user:
          description: The project's sales rep.
          type: object
          allOf:
            - $ref: '#/components/schemas/SalesRep'
        actionItems:
          type: array
          description: The action items related to the project.
          items:
            $ref: '#/components/schemas/ActionItemIri'
        attachments:
          type: array
          description: The attachments related to the project.
          items:
            $ref: '#/components/schemas/AttachmentIri'
        comments:
          type: array
          description: The comments related to the project.
          items:
            $ref: '#/components/schemas/CommentIri'
        adders:
          type: array
          description: A list of adders for the project.
          items:
            $ref: '#/components/schemas/Adder'
        externalIdentifiers:
          type: array
          description: A list of external identifiers for the project.
          items:
            $ref: '#/components/schemas/ExternalIdentifier'
    ProjectCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Project"
            "@id":
              example: "/projects"
            totalItems:
              type: integer
              description: The total number of projects.
              example: 5
            member:
              type: array
              description: A list of projects.
              items:
                $ref: '#/components/schemas/Project'
            search:
              type: object
              description: Search parameters for filtering the project collection.
              properties:
                "@type":
                  type: string
                  example: "IriTemplate"
                template:
                  type: string
                  example: "/projects{?proposalId,status,phase,dealer,installer,user,customer,createdAt,updatedAt}"
                variableRepresentation:
                  type: string
                  example: "BasicRepresentation"
                mapping:
                  type: array
                  items:
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: "IriTemplateMapping"
                      variable:
                        type: string
                      property:
                        type: string
                  example:
                    - { "@type": "IriTemplateMapping", "variable": "proposalId", "property": "proposal_id" }
                    - { "@type": "IriTemplateMapping", "variable": "status", "property": "status" }
                    - { "@type": "IriTemplateMapping", "variable": "phase", "property": "phase" }
                    - { "@type": "IriTemplateMapping", "variable": "dealer", "property": "dealer" }
                    - { "@type": "IriTemplateMapping", "variable": "distributor", "property": "distributor" }
                    - { "@type": "IriTemplateMapping", "variable": "installer", "property": "installer" }
                    - { "@type": "IriTemplateMapping", "variable": "user", "property": "user" }
                    - { "@type": "IriTemplateMapping", "variable": "customer", "property": "customer" }
                    - { "@type": "IriTemplateMapping", "variable": "agreementType", "property": "agreementType" }
                    - { "@type": "IriTemplateMapping", "variable": "productType", "property": "productType" }
                    - { "@type": "IriTemplateMapping", "variable": "createdAt", "property": "created_at" }
                    - { "@type": "IriTemplateMapping", "variable": "updatedAt", "property": "updated_at" }
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/projects?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/projects?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/projects?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/projects?page=2"
    ProjectCreate:
      type: object
      allOf:
        - type: object
          required:
            - applicationId
            - address
            - customer
          properties:
            applicationId:
              description: The unique identifer of the qualification application for the customer.
              allOf:
                - $ref: "#/components/schemas/ApplicationId"
            address:
              description: The project address.
              allOf:
                - $ref: "#/components/schemas/AddressCreate"
            customer:
              description: The project customer.
              allOf:
                - $ref: "#/components/schemas/UserCreate"
            dealer:
              description: The dealer responsible for the project. Either the `dealer` or `dealerId` must be provided.
              allOf:
                - $ref: "#/components/schemas/DealerCreate"
              nullable: true
            dealerId:
              description: The unique identifier of the dealer.
              type: integer
              nullable: true
            installer:
              description: The installer responsible for the project. Either the `installer` or `installerId` must be provided.
              allOf:
                - $ref: "#/components/schemas/InstallerCreate"
              nullable: true
            installerId:
              description: The unique identifier of the installer.
              type: integer
              nullable: true
            distributor:
              description: The distributor responsible for the project.
              allOf:
                - $ref: "#/components/schemas/DistributorCreate"
              nullable: true
            distributorId:
              description: The unique identifier of the distributor.
              type: integer
              nullable: true
            user:
              description: The sales rep responsible for the project. Either the `user` or `userId` must be provided.
              allOf:
                - $ref: "#/components/schemas/UserCreate"
              nullable: true
            userId:
              description: The unique identifier of the sales rep.
              type: integer
              nullable: true
            externalId:
              description: Optional external identifiers to add to the project.
              type: array
              items:
                $ref: "#/components/schemas/ExternalIdentifierCreate"
            agreementType:
              $ref: '#/components/schemas/ApplicationAgreementType'
            productType:
              $ref: '#/components/schemas/ApplicationProductType'
            totalContractValue:
              description: The total contract value of the project.
              type: number
              format: number
            amountFinanced:
              description: The total amount that was financed by the customer.
              type: number
            downPayment:
              description: The down payment provided by the customer.
              type: number
            dealerFee:
              description: The loan dealer fee.
              type: number
              maximum: 1
              minimum: 0
            interestRate:
              description: The loan interest rate.
              type: number
              maximum: 1
              minimum: 0
            contractRate:
              description: The PPA/lease first year's contract rate.
              type: number
              maximum: 1
              minimum: 0
            escalator:
              description: The PPA/lease escalator.
              type: number
              maximum: 1
              minimum: 0
            term:
              description: The agreement term length in years.
              default: 25
              type: integer
              maximum: 25
              minimum: 1
            proposalId:
              description: A unique identifier for the proposal.
              nullable: true
              type: integer
            proposalDate:
              description: The date of the proposal.
              nullable: true
              type: string
              format: date
            proposalLink:
              description: A link to the proposal
              nullable: true
              type: string
              format: uri
            introductoryTerm:
              description: The loan introductory term length in months.
              type: integer
              default: 0
              maximum: 36
              minimum: 0
            introductoryPayment:
              description: The loan introductory payment.
              type: number
              default: 0
    ProjectId:
      description: The unique identifier of a project.
      type: integer
    ProjectIri:
      description: The unique JSON-LD IRI reference to the project.
      type: string
      format: iri-reference
      example: '/projects/1'
    ProjectMilestone:
      description: The current project milestone.
      type: string
      enum:
        - m1
        - m2
        - m3
    ProjectPhase:
      description: The current project phase.
      type: string
      enum:
        - commissioning
        - customer_survey
        - design
        - final_payment
        - first_payment
        - initial_review
        - inspection
        - install
        - install_qa
        - interconnection
        - ntp_approval
        - permitting
        - procurement
        - pto
        - rebates
        - sale
        - site_survey
    ProjectProposalId:
      description: A second unique identifier of a project.
      type: integer
    ProjectStatus:
      description: The current project status.
      type: string
      enum:
        - new
        - in_progress
        - on_hold
        - complete
        - cancelled
        - stale
    SalesRep:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/UserIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: User
        id:
          $ref: '#/components/schemas/UserId'
        name:
          type: string
    Segment:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/SegmentIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Segment
        id:
          $ref: '#/components/schemas/SegmentId'
        name:
          description: The name of the segment.
          type: string
        moduleQuantity:
          description: The number of modules in the segment.
          type: integer
        arrayType:
          description: The type of array.
          type: string
          enum:
            - Fixed - Ground Mounted
            - Fixed - Roof Mounted
        azimuth:
          description: The array azimuth.
          type: number
        tilt:
          description: The array tilt in degrees.
          type: number
        shading:
          description: The array shading.
          type: number
        products:
          description: The products the array is constructed from.
          type: array
          items:
            $ref: '#/components/schemas/Product'
    SegmentId:
      description: The unique identifier of a segment.
      type: integer
    SegmentIri:
      description: The unique JSON-LD IRI reference to the segment.
      type: string
      format: iri-reference
      example: '/segments/1'
    UserCreate:
      type: object
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - mobilePhone
      allOf:
        - $ref: '#/components/schemas/UserDetails'
      properties:
        dateOfBirth:
          description: The user's date of birth.
          type: string
          format: date
        mobilePhone:
          description: The user's mobile phone number.
          type: string
          format: tel
        externalId:
          description: Optional external identifiers to add to the user.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    UserDetails:
      type: object
      properties:
        firstName:
          description: The user's first name.
          type: string
        lastName:
          description: The user's last name.
          type: string
        email:
          description: The users's email.
          type: string
          format: email
    UserId:
      description: The unique identifier of a user.
      type: integer
    UserIri:
      description: The unique JSON-LD IRI reference to the user.
      type: string
      format: iri-reference
      example: '/users/1'
    Webhook:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/WebhookIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Webhook
        id:
          $ref: '#/components/schemas/WebhookId'
        url:
          description: The URL the webhook request will be sent to.
          type: string
          format: uri
        enabled:
          description: Whether or not the webhook is enabled.
          type: boolean
          default: true
        method:
          description: The HTTP method that will be used.
          type: string
          enum:
            - get
            - post
        events:
          description: The events that will trigger the webhook to send.
          type: array
          items:
            $ref: '#/components/schemas/WebhookEvent'
    WebhookEvent:
      description: The type of event that triggers the webhook.
      type: string
      enum:
        - application.created
        - application.updated
        - application.deleted
        - project.created
        - project.updated
        - project.deleted
        - project.phase.updated
        - project.status.updated
        - user.created
        - user.updated
        - user.deleted
    WebhookCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Webhook"
            "@id":
              example: "/webhooks"
            totalItems:
              type: integer
              description: The total number of webhooks.
              example: 5
            member:
              type: array
              description: A list of webhooks.
              items:
                $ref: '#/components/schemas/Webhook'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/webhooks?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/webhooks?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/webhooks?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/webhooks?page=2"
    WebhookId:
      description: The unique identifier of a webhook.
      type: integer
    WebhookIri:
      description: The unique JSON-LD IRI reference to the webhook.
      type: string
      format: iri-reference
      example: '/webhooks/1'
  securitySchemes:
    ApiKey:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://partners.eliosfund.com/oauth/authorize
          tokenUrl: https://partners.eliosfund.com/oauth/token
          refreshUrl: https://partners.eliosfund.com/oauth/refresh
          scopes:
            create:applications: Can create a qualification application
            create:attachments: Can create attachments
            create:projects: Can create projects
            manage:webhooks: Can manage webhooks
            qualify:applications: Can submit an application for qualification
            update:applications: Can update a qualification application
            update:projects: Can update a project
            view:action:items: Can view action items
            view:addresses: Can view addresses
            view:applications: Can view applications
            view:attachments: Can view attachments
            view:comments: Can view comments
            view:dealers: Can view dealers
            view:distributors: Can view distributors
            view:installers: Can view installers
            view:partners: Can view partners
            view:projects: Can view projects
            view:users: Can view users
        clientCredentials:
          tokenUrl: https://partners.eliosfund.com/oauth/token
          scopes:
            create:applications: Can create a qualification application
            create:attachments: Can create attachments
            create:projects: Can create projects
            manage:webhooks: Can manage webhooks
            qualify:applications: Can submit an application for qualification
            update:applications: Can update a qualification application
            update:projects: Can update a project
            view:action:items: Can view action items
            view:addresses: Can view addresses
            view:applications: Can view applications
            view:attachments: Can view attachments
            view:comments: Can view comments
            view:dealers: Can view dealers
            view:distributors: Can view distributors
            view:installers: Can view installers
            view:partners: Can view partners
            view:projects: Can view projects
            view:users: Can view users
security:
  - ApiKey: []
  - OAuth: []

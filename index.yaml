openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Elios Fund API'
  description: The Elios Fund API provides a robust interface for partners to integrate and access the most powerful financing options in solar today.
  contact:
    name: Elios Fund Engineering
    url: https://portal.support.eliosfund.com
    email: engineering@eliosfund.com

externalDocs:
  url: https://partners.eliosfund.com
  description: Manage your Elios Fund API keys and OAuth 2.0 clients.

servers:
  - url: https://api.eliosfund.com
    description: All requests should be directed to the production environment.
  - url: https://api.uat.eliosfund.com
    description: For access to the UAT environment, please contact Elios Fund support.
  - url: https://api.staging.eliosfund.com
    description: For access to the staging environment, please contact Elios Fund support.

paths:
  /applications:
    get:
      summary: Get all qualification applications
      description: Returns all available qualification applications.
      security:
        - ApiKey:
          - view:applications
        - OAuth:
          - view:applications
      responses:
        200:
          description: All qualification applications assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a qualification application
      description: Start a new qualification application.
      security:
        - ApiKey:
          - create:applications
        - OAuth:
          - create:applications
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/ApplicationCreate"
      responses:
        201:
          description: The new qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Application'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'      
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'                
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}:
    parameters:
      - name: applicationId
        description: The unique identifier of the qualification application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
    get:
      summary: Get a qualification application
      description: Returns all available information about a single qualification application.
      security:
        - ApiKey:
          - view:applications
        - OAuth:
          - view:applications
      responses:
        200:
          description: The requested qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Application'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/qualify:
    parameters:
      - name: applicationId
        description: The unique identifier of the qualification application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
    get:
      summary: Qualify an application
      description: Runs the necessary processes to check the qualification status of an application. The application must be in a `submitted` status in order to run the qualification checks. While this process is not immediate, but often finishes within a minute, one should either listen to a webhook event or poll the `GET` endpoint to check the status of the application. The status of the application will turn from `in_progress` to either `approved` or `declined`.
      security:
        - ApiKey:
          - qualify:applications
        - OAuth:
          - qualify:applications
      responses:
        200:
          description: The requested qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationQualify'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'   
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/submit:
    parameters:
      - name: applicationId
        description: The unique identifier of the qualification application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
    put:
      summary: Submit a qualification application
      description: Submits a qualification application and changes the status from `open` to `submitted`. A qualification application cannot be edited in the `submitted` state. This is necessary before a qualification check can run.
      security:
        - ApiKey:
          - update:applications
        - OAuth:
          - update:applications
      responses:
        200:
          description: The submitted qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationSubmit'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'   
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /dealers:
    get:
      summary: Get all dealers
      description: Returns all available dealers.
      security:
        - ApiKey:
          - view:dealers
        - OAuth:
          - view:dealers
      responses:
        200:
          description: All dealers assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DealerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /dealers/{dealerId}:
    parameters:
      - name: dealerId
        description: The unique identifier of the dealer.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DealerId'
    get:
      summary: Get a dealer
      description: Returns all available information about a single dealer.
      security:
        - ApiKey:
          - view:dealers
        - OAuth:
          - view:dealers
      responses:
        200:
          description: The dealers corresponding to the provided `dealerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Dealer'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'              
  /distributors:
    get:
      summary: Get all distributors
      description: Returns all available distributors.
      security:
        - ApiKey:
          - view:distributors
        - OAuth:
          - view:distributors
      responses:
        200:
          description: All distributors assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DistributorCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /distributors/{distributorId}:
    parameters:
      - name: distributorId
        description: The unique identifier of the distributor.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DistributorId'
    get:
      summary: Get a distributor
      description: Returns all available information about a single distributor.
      security:
        - ApiKey:
          - view:distributors
        - OAuth:
          - view:distributors
      responses:
        200:
          description: The distributor corresponding to the provided `distributorId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Distributor'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /installers:
    get:
      summary: Get all installers
      description: Returns all available installers.
      security:
        - ApiKey:
          - view:installers
        - OAuth:
          - view:installers
      responses:
        200:
          description: All installers assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/InstallerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /installers/{installerId}:
    parameters:
      - name: installerId
        description: The unique identifier of the installer.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InstallerId'
    get:
      summary: Get an installer
      description: Returns all available information about a single installer.
      security:
        - ApiKey:
          - view:installers
        - OAuth:
          - view:installers
      responses:
        200:
          description: The installer corresponding to the provided `installerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Installer'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    get:
      summary: Get all projects
      description: Returns all available projects.
      security:
        - ApiKey:
          - view:projects
        - OAuth:
          - view:projects
      responses:
        200:
          description: All projects assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProjectCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get a project
      description: Returns all available information about a single project.
      security:
        - ApiKey:
          - view:projects
        - OAuth:
          - view:projects
      responses:
        200:
          description: The project corresponding to the provided `projectId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /partners:
    get:
      summary: Get all partners
      description: Returns all available partners.
      security:
        - ApiKey:
          - view:partners
        - OAuth:
          - view:partners
      responses:
        200:
          description: All partners assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PartnerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /partners/{partnerId}:
    parameters:
      - name: partnerId
        description: The unique identifier of the partner.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PartnerId'
    get:
      summary: Get a partner
      description: Returns all available information about a single partner.
      security:
        - ApiKey:
          - view:partners
        - OAuth:
          - view:partners
      responses:
        200:
          description: The partner corresponding to the provided `partnerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Partner'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /webhooks:
    get:
      summary: Get all webhooks
      description: Returns all available webhooks.
      security:
        - ApiKey:
          - manage:webhooks
        - OAuth:
          - manage:webhooks
      responses:
        200:
          description: All webhooks assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/WebhookCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'     
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'            
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ActionItemIri:
      description: The unique JSON-LD IRI reference to the action item.
      type: string
      format: iri-reference
      example: '/action-items/1'
    Address:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/AddressIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Address
        id:
          $ref: '#/components/schemas/AddressId'
    AddressId:
      description: The unique identifier of an address.
      type: integer 
    AddressIri:
      description: The unique JSON-LD IRI reference to the address.
      type: string
      format: iri-reference
      example: '/addresses/1'
    Application:
      type: object
      allOf:
          - $ref: '#/components/schemas/ApplicationDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        primaryApplicant:
          $ref: '#/components/schemas/ApplicationApplicant'
        coApplicant:
          $ref: '#/components/schemas/ApplicationApplicant'
        creditReportTier:
          description: The highest credit report tier between both applicants.
          type: string
          enum:
            - declined
            - diamond
            - platinum
            - gold
            - silver
            - bronze
            - mercury
        status:
          $ref: '#/components/schemas/ApplicationStatus'
        team:
          type: object
          description: The team handling the proposed project.
          properties:
            dealer:
              description: The dealer handling the qualification application.
              $ref: '#/components/schemas/Dealer'
            installer:
              description: The installer handling the qualification application.
              $ref: '#/components/schemas/Installer'
            user:
              description: The sales rep handling the qualification application.
              $ref: '#/components/schemas/SalesRep'
        externalIdentifiers:
          type: array
          description: A list of external identifiers for the qualification application.
          items:
            $ref: '#/components/schemas/ExternalIdentifier'
    ApplicationAddress:
      type: object
      properties:
        streetNumber:
          type: string
          format: numeric
        streetName:
          type: string
        city:
          type: string
          minimum: 3
          maximum: 60
        state:
          type: string
          minimum: 2
          maximum: 2
        postCode:
          type: string
          format: numeric
          minimum: 5
          maximum: 5
        country:
          type: string
          format: numeric
          minimum: 3
          maximum: 3
    ApplicationApplicant:
      description: The demographics of a qualification applicant.
      type: object
      properties:
        firstName:
          description: The first name of the applicant.
          type: string
        middleName:
          description: An optional middle name of the applicant.
          type: string
          nullable: true
        lastName:
          description: The last name of the applicant.
          type: string
        email:
          description: The email of the applicant.
          type: string
          format: email
        dateOfBirth:
          description: The date of birth of the applicant.
          type: string
          format: date
        ssn:
          description: The last 4 digits of the applicant\'s social security number.
          type: string
          format: numeric
          minimum: 4
          maximum: 4
        mobilePhone:
          description: The mobile phone number of the applicant.
          type: string
          format: tel
        homePhone:
          description: An optional home phone number of the applicant.
          type: string
          format: tel
          nullable: true
        currentAddress:
          description: The current home address of the applicant.
          $ref: '#/components/schemas/ApplicationAddress'
        previousAddress:
          description: If the applicant has not lived at their current address for more than two years, their previous home address.
          $ref: '#/components/schemas/ApplicationAddress'
          nullable: true
    ApplicationCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Application"
            "@id":
              example: "/applications"
            totalItems:
              type: integer
              description: The total number of qualification applications.
              example: 5
            member:
              type: array
              description: A list of qualification applications.
              items:
                $ref: '#/components/schemas/Application'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/applications?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/applications?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/applications?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/applications?page=2"
    ApplicationCreate:
      type: object        
      allOf:
          - $ref: '#/components/schemas/ApplicationDetails'
          - type: object
            required:
              - primaryApplicant
              - agreementType
              - productType
              - userId
              - dealerId
              - installerId
              - consent1
              - consent2
              - consent3
            properties:
              primaryApplicant:
                $ref: "#/components/schemas/ApplicationApplicant"
              coApplicant:
                $ref: "#/components/schemas/ApplicationApplicant"
              userId:
                description: The ID of the sales rep.
                type: integer
              dealerId:
                description: The ID of the dealer.
                type: integer
              installerId:
                description: The ID of the installer.
                type: integer
              consent1:
                description: Whether or not the customer agrees to the first consent.
                type: boolean
              consent2:
                description: Whether or not the customer agrees to the second consent.
                type: boolean
              consent3:
                description: Whether or not the customer agrees to the third consent.
                type: boolean
              externalId:
                $ref: "#/components/schemas/ExternalIdentifierCreate"
    ApplicationDetails:
      type: object
      properties:
        referenceId:
          description: An optional application reference ID such as the proposal ID.
          type: string
          nullable: true
        agreementType:
          description: The agreement type being used.
          type: string
          enum:
            - ppa
            - lease
            - loan
        productType:
          description: The type of product that is being qualified.
          type: string
          enum:
            - solar
            - solar_storage
            - storage
    ApplicationId:
      description: The unique identifier of a qualification application.
      type: integer      
    ApplicationIri:
      description: The unique JSON-LD IRI reference to the qualification application.
      type: string
      format: iri-reference
      example: '/applications/1'
    ApplicationStatus:
      description: The customer qualification application status.
      type: string
      enum:
        - open
        - submitted
        - onhold
        - approved
        - declined
        - none
        - cancelled
        - in_progress
    ApplicationSubmit:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: "#/components/schemas/ApplicationStatus"
    ApplicationQualify:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: "#/components/schemas/ApplicationStatus"
          default: in_progress
    AttachmentIri:
      description: The unique JSON-LD IRI reference to the attachment.
      type: string
      format: iri-reference
      example: '/attachments/1'
    CustomerIri:
      description: The unique JSON-LD IRI reference to the customer.
      type: string
      format: iri-reference
      example: '/customers/1'
    CommentIri:
      description: The unique JSON-LD IRI reference to the comment.
      type: string
      format: iri-reference
      example: '/comments/1'
    Dealer:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/DealerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Dealer
        id:
          $ref: '#/components/schemas/DealerId'
        name:
          type: string
        email:
          type: string
          format: email
        website:
          type: string
          format: uri
        installers:
          type: array
          description: An array of installers the dealer is approved to work with.
          items:
            $ref: '#/components/schemas/InstallerIri' 
    DealerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Dealer"
            "@id":
              example: "/dealers"
            totalItems:
              type: integer
              description: The total number of dealers.
              example: 5
            member:
              type: array
              description: A list of dealers.
              items:
                $ref: '#/components/schemas/Dealer'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/dealers?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/dealers?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/dealers?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/dealers?page=2"
    DealerId:
      description: The unique identifier of a dealer.
      type: integer      
    DealerIri:
      description: The unique JSON-LD IRI reference to the dealer.
      type: string
      format: iri-reference
      example: '/dealers/1'
    Distributor:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/DistributorIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Distributor
        id:
          $ref: '#/components/schemas/DistributorId'
        name:
          type: string
        email:
          type: string
          format: email
        website:
          type: string
          format: uri
    DistributorCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Distributor"
            "@id":
              example: "/distributors"
            totalItems:
              type: integer
              description: The total number of distributors.
              example: 5
            member:
              type: array
              description: A list of distributors.
              items:
                $ref: '#/components/schemas/Distributor'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/distributors?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/distributors?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/distributors?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/distributors?page=2"
    DistributorId:
      description: The unique identifier of a distributor.
      type: integer
    DistributorIri:
      description: The unique JSON-LD IRI reference to the distributor.
      type: string
      format: iri-reference
      example: '/distributors/1'
    Error:
      type: object
      properties:
        type:
          description: The IRI reference.
          type: string
          format: iri-reference
          example: '/errors/401'
        title:
          description: A human readable error message.
          type: string 
        status:
          description: The HTTP status code.
          type: integer
        detail:
          description: More detailed error information.
          type: string  
    ExternalIdentifier:
      type: object
      properties:
        key:
          type: string
          description: The key of the external identifier.
        value:
          type: string
          description: The value of the external identifier.
    ExternalIdentifierCreate:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/ExternalIdentifier'
          - type: object
            required:
              - key
              - value
    HydraCollectionMetadata:
      type: object
      properties:
        "@context":
          type: string
          description: The JSON-LD context.
        "@id":
          type: string
          description: The JSON-LD unique IRI for the collection.
        "@type":
          type: string
          description: The JSON-LD type of the collection.
          example: Collection
    HydraView:
      type: object
      properties:
        "@id":
          type: string
          description: The identifier of the paginated view.
        "@type":
          type: string
          description: The JSON-LD type of the view.
          example: "PartialCollectionView"
        first:
          type: string
          description: The first page of the collection.
        last:
          type: string
          description: The last page of the collection.
        next:
          type: string
          description: The next page of the collection (if available).
    Installer:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/InstallerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Installer
        id:
          $ref: '#/components/schemas/InstallerId'
        name:
          type: string
        email:
          type: string
          format: email
        website:
          type: string
          format: iri-reference
        dealers:
          type: array
          description: An array of dealers the installer is approved to work with.
          items:
            $ref: '#/components/schemas/DealerIri'
    InstallerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Installer"
            "@id":
              example: "/installers"
            totalItems:
              type: integer
              description: The total number of installers.
              example: 5
            member:
              type: array
              description: A list of installers.
              items:
                $ref: '#/components/schemas/Installer'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/installers?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/installers?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/installers?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/installers?page=2"
    InstallerId:
      description: The unique identifier of an installer.
      type: integer
    InstallerIri:
      description: The unique JSON-LD IRI reference to the installer.
      type: string
      format: iri-reference
      example: '/installers/1'
    Partner:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/PartnerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Partner
        id:
          $ref: '#/components/schemas/PartnerId'
        name:
          type: string
        email:
          type: string
          format: email
        website:
          type: string
          format: uri
    PartnerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Partner"
            "@id":
              example: "/partners"
            totalItems:
              type: integer
              description: The total number of partners.
              example: 5
            member:
              type: array
              description: A list of partners.
              items:
                $ref: '#/components/schemas/Partner'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/partners?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/partners?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/partners?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/partners?page=2"
    PartnerId:
      description: The unique identifier of a partner.
      type: integer
    PartnerIri:
      description: The unique JSON-LD IRI reference to the partner.
      type: string
      format: iri-reference
      example: '/partners/1'
    Project:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ProjectIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Project
        id:
          $ref: '#/components/schemas/ProjectId'
        proposalId:
          $ref: '#/components/schemas/ProjectProposalId'  
        status:
          $ref: '#/components/schemas/ProjectStatus'  
        phase:
          $ref: '#/components/schemas/ProjectPhase'
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatus'
        packagePrice:
          description: The total contract price.
          type: number
        panelCount:
          description: The number of solar panels involved in the system.
          type: number
        panelWatts:
          description: The wattage of an individual panel.
          type: number
        systemSize:
          description: The size of the system in kW.
          type: number
        systemProduction:
          description: The yearly system energy production in kWh.
          type: number
        proposalLink:
          description: The link to the project proposal.
          type: string
        amountFinanced:
          description: The amount financed by the customer.
          type: number
        downPayment:
          description: The down payment required.
          type: number
        introductoryTerm:
          type: number
        introductoryPayment:
          type: number
        federalRebate:
          type: number
        stateRebase:
          type: number
        utilityRebate:
          type: number
        loanProductName:
          type: string
        loanDealerFee:
          type: number
        loanApr:
          type: number
        loanTerm:
          type: number
        contractRate:
          type: number
        basePpw:
          type: number
        proposalDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/AddressIri'
        customer:
          $ref: '#/components/schemas/CustomerIri'
        dealer:
          $ref: '#/components/schemas/DealerIri'
        distributor:
          $ref: '#/components/schemas/DistributorIri'
        installer:
          $ref: '#/components/schemas/InstallerIri'
        user:
          $ref: '#/components/schemas/UserIri'
        actionItems:
          type: array
          items:
            $ref: '#/components/schemas/ActionItemIri'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentIri'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentIri'  
    ProjectCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Project"
            "@id":
              example: "/projects"
            totalItems:
              type: integer
              description: The total number of projects.
              example: 5
            member:
              type: array
              description: A list of projects.
              items:
                $ref: '#/components/schemas/Project'
            search:
              type: object
              description: Search parameters for filtering the project collection.
              properties:
                "@type":
                  type: string
                  example: "IriTemplate"
                template:
                  type: string
                  example: "/projects{?proposalId,status,phase,dealer,installer,user,customer,createdAt,updatedAt}"
                variableRepresentation:
                  type: string
                  example: "BasicRepresentation"
                mapping:
                  type: array
                  items:
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: "IriTemplateMapping"
                      variable:
                        type: string
                      property:
                        type: string
                  example:
                    - { "@type": "IriTemplateMapping", "variable": "proposalId", "property": "proposal_id" }
                    - { "@type": "IriTemplateMapping", "variable": "status", "property": "status" }
                    - { "@type": "IriTemplateMapping", "variable": "phase", "property": "phase" }
                    - { "@type": "IriTemplateMapping", "variable": "dealer", "property": "dealer" }
                    - { "@type": "IriTemplateMapping", "variable": "installer", "property": "installer" }
                    - { "@type": "IriTemplateMapping", "variable": "user", "property": "user" }
                    - { "@type": "IriTemplateMapping", "variable": "customer", "property": "customer" }
                    - { "@type": "IriTemplateMapping", "variable": "createdAt", "property": "created_at" }
                    - { "@type": "IriTemplateMapping", "variable": "updatedAt", "property": "updated_at" }
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/projects?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/projects?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/projects?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/projects?page=2"        
    ProjectId:
      description: The unique identifier of a project.
      type: integer            
    ProjectIri:
      description: The unique JSON-LD IRI reference to the project.
      type: string
      format: iri-reference
      example: '/projects/1'    
    ProjectPhase:
      description: The current project phase.
      type: string
      enum:
        - commissioning
        - customer_survey
        - design
        - final_payment
        - first_payment
        - initial_review
        - inspection
        - install
        - install_qa
        - interconnection
        - ntp_review
        - ntp_submission
        - permitting
        - procurement
        - pto
        - rebates
        - sale
        - site_survey
    ProjectProposalId:
      description: A second unique identifier of a project.
      type: string   
    ProjectStatus:
      description: The current project status.
      type: string
      enum:
        - new
        - cancelled
        - in_progress
        - on_hold
        - complete
    SalesRep:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/UserIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: User
        id:
          $ref: '#/components/schemas/UserId'
        name:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
    UserId:
      description: The unique identifier of a user.
      type: integer 
    UserIri:
      description: The unique JSON-LD IRI reference to the user.
      type: string
      format: iri-reference
      example: '/users/1'
    Webhook:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/WebhookIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Webhook
        id:
          $ref: '#/components/schemas/WebhookId'
        url:
          description: The URL the webhook request will be sent to.
          type: string
          format: uri
        enabled:
          description: Whether or not the webhook is enabled.
          type: boolean
          default: true
        method:
          description: The HTTP method that will be used.
          type: string
          enum:
            - get
            - post
        events:
          description: The events that will trigger the webhook to send.
          type: array
          items: 
            $ref: '#/components/schemas/WebhookEvent'
    WebhookEvent:
      description: The type of event that triggers the webhook.
      type: string
      enum:
        - application.created
        - application.updated
        - application.deleted
        - project.created
        - project.updated
        - project.deleted
        - project.phase.updated
        - project.status.updated
        - user.created
        - user.updated
        - user.deleted
    WebhookCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Webhook"
            "@id":
              example: "/webhooks"
            totalItems:
              type: integer
              description: The total number of webhooks.
              example: 5
            member:
              type: array
              description: A list of webhooks.
              items:
                $ref: '#/components/schemas/Webhook'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/webhooks?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/webhooks?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/webhooks?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/webhooks?page=2"
    WebhookId:
      description: The unique identifier of a webhook.
      type: integer
    WebhookIri:
      description: The unique JSON-LD IRI reference to the webhook.
      type: string
      format: iri-reference
      example: '/webhooks/1'
  securitySchemes:
    ApiKey:
      type: apiKey
      name: Authorization
      in: header
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://partners.eliosfund.com/oauth/authorize
          tokenUrl: https://partners.eliosfund.com/oauth/token
          refreshUrl: https://partners.eliosfund.com/oauth/refresh
          scopes:
            manage:webhooks: Can manage webhooks
            view:action:items: Can view action items
            view:addresses: Can view addresses
            create:applications: Can create a qualification application
            qualify:applications: Can submit an application for qualification
            view:applications: Can view applications
            view:attachments: Can view attachments
            view:comments: Can view comments
            view:dealers: Can view dealers
            view:distributors: Can view distributors
            view:installers: Can view installers
            view:partners: Can view partners
            view:projects: Can view projects
            view:users: Can view users
        clientCredentials:
          tokenUrl: https://partners.eliosfund.com/oauth/token
          scopes:
            manage:webhooks: Can manage webhooks
            view:action:items: Can view action items
            view:addresses: Can view addresses
            create:applications: Cab create a qualification application
            qualify:applications: Can submit an application for qualification
            view:applications: Can view applications
            view:attachments: Can view attachments
            view:comments: Can view comments
            view:dealers: Can view dealers
            view:distributors: Can view distributors
            view:installers: Can view installers
            view:partners: Can view partners
            view:projects: Can view projects
            view:users: Can view users
security:
  - ApiKey: []
  - OAuth: []
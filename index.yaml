openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Elios Fund API'
  description: The Elios Fund API provides a robust interface for partners to integrate and access the most powerful financing options in solar today.
  contact:
    name: Elios Fund Engineering
    url: https://portal.support.eliosfund.com
    email: engineering@eliosfund.com

externalDocs:
  url: https://partners.eliosfund.com
  description: Manage your Elios Fund API keys and OAuth 2.0 clients.

servers:
  - url: https://api.eliosfund.com
    description: All requests should be directed to the production environment.
  - url: https://api.uat.eliosfund.com
    description: For access to the UAT environment, please contact Elios Fund support.
  - url: https://api.staging.eliosfund.com
    description: For access to the staging environment, please contact Elios Fund support.

paths:
  /action-items/{actionItemId}/attachments:
    parameters:
      - name: actionItemId
        description: The unique identifier of the action item.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AttachmentId'
    get:
      summary: Get action item attachments
      description: Returns all the current action item attachments.
      security:
        - ApiKey:
            - view:attachments
        - OAuth:
            - view:attachments
      responses:
        200:
          description: The action item attachments.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/AttachmentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /action-items/{actionItemId}/comments:
    parameters:
      - name: actionItemId
        description: The unique identifier of the action item.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ActionItemId'
    get:
      summary: Get action item comments
      description: Returns all the current action item comments.
      security:
        - ApiKey:
            - view:comments
        - OAuth:
            - view:comments
      responses:
        200:
          description: The action item comments.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CommentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications:
    get:
      summary: Get all qualification applications
      description: |
        Retrieves all solar financing qualification applications associated with your partner account.

        Applications represent the first step in the solar financing workflow where customers
        submit their personal information to determine their qualification for solar financing.

        **Business Context:**
        - Use this endpoint to list applications for reporting, status monitoring, or administration
        - Applications are automatically filtered by your partner account access
        - Results are paginated using Hydra collection format

        **Application Lifecycle:**
        1. `open` - Application created, can be edited
        2. `submitted` - Application locked for editing, ready for qualification
        3. `in_progress` - Qualification checks running
        4. `approved/declined` - Final qualification result
      security:
        - ApiKey:
            - view:applications
        - OAuth:
            - view:applications
      responses:
        200:
          description: All qualification applications assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new qualification application
      description: |
        Creates a new solar financing qualification application for a customer.

        **Business Context:**
        This is the first step in the solar financing workflow. The application collects
        customer demographic and contact information needed for credit qualification.

        **Required Information:**
        - Primary applicant details (name, address, contact, SSN last 4 digits)
        - Product and agreement type for the solar installation
        - Sales team assignment (dealer, installer, sales rep)
        - Customer consents for credit checks and terms

        **Optional Information:**
        - Co-applicant details (joint applications for better qualification)
        - External identifiers for integration with your systems
        - Reference ID (e.g., proposal or quote ID)

        **Next Steps:**
        After creation, applications start in `open` status. You must call the submit endpoint
        before running qualification checks.

        **Validation Notes:**
        - SSN must be exactly 4 digits (last 4 digits only for security)
        - Phone numbers validated using E.164 format
        - State codes must be 2-letter abbreviations
        - ZIP codes must be exactly 5 digits
        - Either provide existing team member IDs or create new team members inline
      security:
        - ApiKey:
            - create:applications
        - OAuth:
            - create:applications
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/ApplicationCreate"
      responses:
        201:
          description: The new qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Application'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}:
    parameters:
      - name: applicationId
        description: |
          The unique identifier of the qualification application.
          This is the numeric ID returned when creating an application.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
        example: 12345
    get:
      summary: Get qualification application details
      description: |
        Retrieves complete information about a specific qualification application,
        including applicant details, status, team assignment, and credit qualification results.

        **Business Context:**
        Use this endpoint to:
        - Check application status and progress
        - Retrieve applicant information for customer service
        - Get credit qualification tier results
        - Review team assignments

        **Response Information:**
        - Full applicant demographics (SSN is masked for security)
        - Current application status and progression
        - Credit report tier (if qualification is complete)
        - Assigned dealer, installer, and sales representative
        - External identifiers and reference IDs

        **Status Guide:**
        - `open`: Application can still be edited
        - `submitted`: Application locked, ready for qualification
        - `in_progress`: Credit checks and qualification running
        - `approved`: Customer qualified for financing
        - `declined`: Customer did not qualify
        - `onhold`: Manual review required
        - `cancelled`: Application cancelled
      security:
        - ApiKey:
            - view:applications
        - OAuth:
            - view:applications
      responses:
        200:
          description: The requested qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Application'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/ach:
    parameters:
      - name: applicationId
        description: |
          The unique identifier of the qualification application.
          The application must be in `approved` status to access ACH authorization.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
        example: 12345
    get:
      summary: Get ACH authorization status and options
      description: |
        Retrieves the ACH (Automated Clearing House) authorization status and available
        completion methods for an approved qualification application.

        **Business Context:**
        ACH authorization is required for customers to set up automatic payments for their
        solar financing. This step comes after successful credit qualification.

        **Prerequisites:**
        - Application must have `approved` status from qualification
        - Customer must be ready to authorize bank account access

        **Authorization Methods:**

        1. **API Integration (Recommended):** Use the returned `plaidLinkToken` to initialize
           Plaid Link in your application for seamless bank account connection

        2. **Web Redirect:** Forward the customer to `achAuthorizationUrl` for a hosted
           authorization experience

        **Response Fields:**
        - `achAuthorizationStatus`: `complete` or `incomplete`
        - `plaidLinkToken`: Token for Plaid Link initialization (expires in 30 minutes)
        - `achAuthorizationUrl`: Direct link for web-based authorization
        - `achAuthorizationConsentHtml/Markdown`: Legal consent text to display

        **Next Steps:**
        After ACH authorization is complete, the customer can proceed to project creation
        and contract execution.

        **Error Conditions:**
        - **403**: Application not in approved status
        - **404**: Application not found or not accessible
      security:
        - ApiKey:
            - view:applications
        - OAuth:
            - view:applications
      responses:
        200:
          description: The requested qualification application.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationAch'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Complete ACH authorization with Plaid
      description: |
        Completes the ACH authorization process using Plaid Link integration.

        **Business Context:**
        This endpoint processes the Plaid Link results after the customer has successfully
        connected their bank account through the Plaid interface.

        **Prerequisites:**
        - Application must be in `approved` status
        - Customer must have completed Plaid Link flow with valid public token
        - Required customer information must be provided

        **Integration Flow:**
        1. Get ACH authorization details from GET endpoint
        2. Initialize Plaid Link with the provided token
        3. Customer completes bank account selection in Plaid interface
        4. Plaid returns a public token
        5. Submit the public token and customer details to this endpoint

        **Required Information:**
        - Customer's full legal name (must match bank account)
        - Contact email and phone number
        - Plaid public token from successful Link session

        **Security Notes:**
        - Plaid tokens expire after 30 minutes
        - Customer information is validated against application data
        - Bank account information is securely stored and encrypted

        **Error Conditions:**
        - **400**: Invalid Plaid token or expired token
        - **403**: Application not approved or already has ACH authorization
        - **422**: Customer information doesn't match application data
      security:
        - ApiKey:
            - update:applications
        - OAuth:
            - update:applications
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/AchAuthorizationCreate"
      responses:
        201:
          description: The new ACH authorization.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/AchAuthorization'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/open:
    parameters:
      - name: applicationId
        description: |
          The unique identifier of the qualification application to reopen.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
        example: 12345
    patch:
      summary: Reopen a qualification application for editing
      description: |
        Reopens a qualification application to allow editing of applicant information.

        **Business Context:**
        Use this endpoint when you need to modify application details after submission,
        such as correcting customer information or updating product selections.

        **Valid Source Statuses:**
        - `submitted`: Application was submitted but not yet qualified
        - `approved`: Qualified application that needs modifications
        - `declined`: Declined application with correctable issues

        **Status Transition:**
        `submitted/approved/declined` → `open`

        **After Reopening:**
        - Application status becomes `open`
        - All fields become editable again
        - Previous qualification results are cleared
        - Application must be resubmitted before running qualification again

        **Common Use Cases:**
        - Correcting customer address or contact information
        - Adding or removing a co-applicant
        - Updating product type or agreement terms
        - Fixing data entry errors discovered after submission

        **Important Notes:**
        - Reopening clears previous credit qualification results
        - Customer will need to be re-qualified after resubmission
        - Any ACH authorization remains valid and doesn't need to be redone

        **Error Conditions:**
        - **400**: Application is already in `open` status
        - **403**: Application status doesn't allow reopening
        - **404**: Application not found
      security:
        - ApiKey:
            - update:applications
        - OAuth:
            - update:applications
      responses:
        200:
          description: The current qualification application status.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationOpen'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/qualify:
    parameters:
      - name: applicationId
        description: |
          The unique identifier of the qualification application to qualify.
          The application must be in `submitted` status.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
        example: 12345
    get:
      summary: Start credit qualification process
      description: |
        Initiates the credit qualification process for a submitted application.

        **Business Context:**
        This endpoint triggers the automated credit assessment that determines if the
        customer qualifies for solar financing and at what tier level.

        **Prerequisites:**
        - Application must be in `submitted` status
        - Cannot run qualification on applications that are already qualified
        - All required applicant information must be complete and validated

        **Qualification Process:**
        1. Credit bureau reports are pulled for all applicants
        2. Automated underwriting rules are applied
        3. Credit tier is assigned based on qualification results
        4. Final approval or decline decision is made

        **Status Transitions:**
        - `submitted` → `in_progress` (immediately)
        - `in_progress` → `approved` or `declined` (within 1-3 minutes)
        - Some applications may go to `onhold` for manual review

        **Credit Tiers (best to worst):**
        - `diamond`: Excellent credit, best rates
        - `platinum`: Very good credit
        - `gold`: Good credit
        - `silver`: Fair credit
        - `bronze`: Below average credit
        - `mercury`: Poor credit, limited options
        - `declined`: Does not qualify for financing

        **Monitoring Results:**
        - **Recommended**: Subscribe to `application.approved` and `application.declined` webhooks
        - **Alternative**: Poll the GET `/applications/{applicationId}` endpoint every 30 seconds
        - Results typically available within 60 seconds

        **Error Conditions:**
        - **400**: Application is not in `submitted` status
        - **409**: Qualification already in progress or completed
        - **422**: Missing required applicant information
      security:
        - ApiKey:
            - qualify:applications
        - OAuth:
            - qualify:applications
      responses:
        200:
          description: The current qualification application status.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationQualify'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /applications/{applicationId}/submit:
    parameters:
      - name: applicationId
        description: |
          The unique identifier of the qualification application to submit.
          The application must be in `open` status.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApplicationId'
        example: 12345
    patch:
      summary: Submit application for qualification
      description: |
        Locks an application for editing and prepares it for credit qualification.

        **Business Context:**
        This endpoint finalizes the application data and moves it into the qualification
        pipeline. After submission, the application cannot be edited without reopening it first.

        **Prerequisites:**
        - Application must be in `open` status
        - All required fields must be completed and valid
        - Customer consents must be obtained (consent1, consent2, consent3)

        **Status Transition:**
        `open` → `submitted`

        **Validation Performed:**
        - All required applicant information is complete
        - Contact information is properly formatted
        - Address information is valid and complete
        - Team assignment (dealer, installer, sales rep) is specified
        - Product and agreement types are selected
        - Customer consents are acknowledged

        **After Submission:**
        - Application becomes read-only
        - Ready for qualification process
        - Must use `/qualify` endpoint to start credit checks
        - Can be reopened if changes are needed

        **Next Steps:**
        1. Call `/applications/{applicationId}/qualify` to start credit assessment
        2. Monitor status via webhooks or polling
        3. Proceed to ACH authorization once approved

        **Error Conditions:**
        - **400**: Application is not in `open` status
        - **422**: Required information is missing or invalid
        - **409**: Application is already submitted
      security:
        - ApiKey:
            - update:applications
        - OAuth:
            - update:applications
      responses:
        200:
          description: The current qualification application status.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ApplicationSubmit'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /dealers:
    get:
      summary: Get all dealers
      description: Returns all available dealers.
      security:
        - ApiKey:
            - view:dealers
        - OAuth:
            - view:dealers
      responses:
        200:
          description: All dealers assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DealerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /dealers/{dealerId}:
    parameters:
      - name: dealerId
        description: The unique identifier of the dealer.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DealerId'
    get:
      summary: Get a dealer
      description: Returns all available information about a single dealer.
      security:
        - ApiKey:
            - view:dealers
        - OAuth:
            - view:dealers
      responses:
        200:
          description: The dealers corresponding to the provided `dealerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Dealer'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /distributors:
    get:
      summary: Get all distributors
      description: Returns all available distributors.
      security:
        - ApiKey:
            - view:distributors
        - OAuth:
            - view:distributors
      responses:
        200:
          description: All distributors assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DistributorCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /distributors/{distributorId}:
    parameters:
      - name: distributorId
        description: The unique identifier of the distributor.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DistributorId'
    get:
      summary: Get a distributor
      description: Returns all available information about a single distributor.
      security:
        - ApiKey:
            - view:distributors
        - OAuth:
            - view:distributors
      responses:
        200:
          description: The distributor corresponding to the provided `distributorId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Distributor'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /installers:
    get:
      summary: Get all installers
      description: Returns all available installers.
      security:
        - ApiKey:
            - view:installers
        - OAuth:
            - view:installers
      responses:
        200:
          description: All installers assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/InstallerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /installers/{installerId}:
    parameters:
      - name: installerId
        description: The unique identifier of the installer.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InstallerId'
    get:
      summary: Get an installer
      description: Returns all available information about a single installer.
      security:
        - ApiKey:
            - view:installers
        - OAuth:
            - view:installers
      responses:
        200:
          description: The installer corresponding to the provided `installerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Installer'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /pricing:
    get:
      summary: Generate pricing for a system
      description: Returns the pricing for a system over the duration of the contract.
      responses:
        200:
          description: The system pricing.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/SystemPricingFactorYearCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl:
    get:
      summary: Get all products
      description: Returns all available product options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All available products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl/batteries:
    get:
      summary: Get all battery products
      description: Returns all available battery options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All battery products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl/inverters:
    get:
      summary: Get all inverter products
      description: Returns all available inverter options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All inverter products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl/modules:
    get:
      summary: Get all module products
      description: Returns all available module options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All module products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/avl/racking:
    get:
      summary: Get all racking products
      description: Returns all available racking options.
      security:
        - ApiKey:
            - view:products
        - OAuth:
            - view:products
      responses:
        200:
          description: All racking products.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    get:
      summary: Get all projects
      description: Returns all available projects.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: All projects assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ProjectCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new solar installation project
      description: |-
        Creates a new solar installation project from an approved qualification application.

        **Business Context:**
        This endpoint converts a qualified customer into an active solar installation project
        with complete financial terms, equipment specifications, and project management setup.

        **Prerequisites:**
        - Must reference an existing, approved qualification application
        - Customer must have completed ACH authorization (if required)
        - All financial terms must be finalized and agreed upon

        **Required Information:**

        **Customer & Installation Details:**
        - Customer demographics (from application, but can be updated)
        - Installation address (where solar system will be installed)
        - Project team assignment (dealer, installer, sales rep, optional distributor)

        **Financial Structure:**
        - Agreement type (`ppa`, `lease`, or `loan`) with type-specific terms
        - Total contract value and amount being financed
        - Down payment and payment structure
        - Interest rates, escalators, and fee structures

        **Project Details:**
        - Product type (solar only, solar + storage, etc.)
        - Optional proposal information and external references
        - Equipment add-ons and customizations

        **Agreement Type Requirements:**

        **Loan Projects:** Must include `introductoryTerm`, `introductoryPayment`, `dealerFee`, `interestRate`

        **PPA Projects:** Must include `contractRate`, `escalator`

        **Lease Projects:** Similar to PPA's with different rate structures

        **Validation Rules:**
        - `amountFinanced` cannot exceed `totalContractValue`
        - `downPayment` cannot exceed `amountFinanced`
        - `term` must be 25 years or less
        - All rates and fees must be between 0 and 1 (0% to 100%)
        - Referenced application must exist and be approved

        **After Creation:**
        - Project starts in `new` status
        - Initial milestone tracking begins
        - Project team is notified to begin work
        - Customer contracts and agreements are prepared
      security:
        - ApiKey:
            - create:projects
        - OAuth:
            - create:projects
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      responses:
        201:
          description: The new project.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get a project
      description: Returns all available information about a single project.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: The project corresponding to the provided `projectId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}/action-items:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get project action items
      description: Returns all the current project action items.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: The project action items.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ActionItemCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}/attachments:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get project attachments
      description: Returns all the current project attachments.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: The project attachments.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/AttachmentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Upload project documents and attachments
      description: |
        Uploads new documents, photos, or files to a solar installation project.

        **Business Context:**
        Use this endpoint to add important project documentation at any stage of the
        installation lifecycle. Proper document management is critical for compliance,
        quality assurance, and successful project completion.

        **Upload Process:**
        1. Prepare files with appropriate names and types
        2. Categorize each file with the correct attachment type
        3. Upload multiple files in a single request
        4. Files are automatically processed and organized

         **File Requirements:**
        - **Maximum Size**: 10MB per file
        - **Supported Formats**: JPG, PNG, PDF, DOCX
        - **Naming**: Descriptive filenames help with organization

        **Required for Each File:**
        - `name`: Descriptive name for the document
        - `type`: Categorization using AttachmentType enum
        - `file`: The binary file data

        **When to Upload Documents:**

        **Project Initiation:**
        - Signed contracts and agreements
        - Initial site photos and surveys
        - Customer identification and property documents

        **Design & Permitting:**
        - Final system designs and layouts
        - Permit applications and approvals
        - Engineering calculations and reports

        **Installation Phase:**
        - Equipment delivery photos and receipts
        - Installation progress documentation
        - Safety inspection photos

        **Completion & Testing:**
        - Final installation photos
        - System testing and commissioning results
        - Inspection certificates and approvals

        **Post-Installation:**
        - Utility PTO documentation
        - System monitoring setup proof
        - Customer handover materials

        **Best Practices:**
        - Upload documents promptly to maintain project timeline
        - Use clear, descriptive names for easy identification
        - Organize files by milestone or project phase
        - Include date information in filenames when relevant
        - Verify file completeness before milestone approvals

        **Automation Integration:**
        Many document types can be automatically generated and uploaded
        through integrations with design platforms, inspection tools,
        and utility systems.
      security:
        - ApiKey:
          - update:projects
        - OAuth:
          - update:projects
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AttachmentCreate"
      responses:
        201:
          description: The new attachment.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/AttachmentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{projectId}/comments:
    parameters:
      - name: projectId
        description: The unique identifier of the project. This can be the Project ID or Proposal ID.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
    get:
      summary: Get project comments
      description: Returns all the current project comments.
      security:
        - ApiKey:
            - view:projects
        - OAuth:
            - view:projects
      responses:
        200:
          description: The project comments.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CommentCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested application could not be found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: There was a validation error with the payload sent.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /partners:
    get:
      summary: Get all partners
      description: Returns all available partners.
      security:
        - ApiKey:
            - view:partners
        - OAuth:
            - view:partners
      responses:
        200:
          description: All partners assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PartnerCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /partners/{partnerId}:
    parameters:
      - name: partnerId
        description: The unique identifier of the partner.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PartnerId'
    get:
      summary: Get a partner
      description: Returns all available information about a single partner.
      security:
        - ApiKey:
            - view:partners
        - OAuth:
            - view:partners
      responses:
        200:
          description: The partner corresponding to the provided `partnerId`.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Partner'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The requested resource was not found.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
  /webhooks:
    get:
      summary: Get all webhooks
      description: Returns all available webhooks.
      security:
        - ApiKey:
            - manage:webhooks
        - OAuth:
            - manage:webhooks
      responses:
        200:
          description: All webhooks assigned to your account.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/WebhookCollection'
        401:
          description: There was no API key provided with the request or the API key was invalid.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: The API key provided does not contain the proper scopes for the current request.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: There was an unexpected server error.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    AchAuthorization:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/AchAuthorizationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: AchAuthorization
        id:
          $ref: '#/components/schemas/AchAuthorizationId'
        fullName:
          type: string
          description: The customer's full name.
        email:
          type: string
          format: email
          description: The customer's email.
        phoneNumber:
          type: string
          format: tel
          description: The customer's phone number.
        status:
          readOnly: true
          $ref: '#/components/schemas/ApplicationAchStatus'
    AchAuthorizationCreate:
      type: object
      required:
        - fullName
        - email
        - phoneNumber
        - plaidPublicToken
      properties:
        fullName:
          type: string
          description: The customer's full name.
        email:
          type: string
          format: email
          description: The customer's email.
        phoneNumber:
          type: string
          format: tel
          description: The customer's phone number.
        plaidPublicToken:
          type: string
          description: The Plaid public token.
    AchAuthorizationId:
      description: The unique identifier of an ACH authorization.
      type: integer
    AchAuthorizationIri:
      description: The unique JSON-LD IRI reference to the ACH authorization.
      type: string
      format: iri-reference
      example: '/ach-authorizations/1'
    ActionItem:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ActionItemIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: ActionItem
        id:
          $ref: '#/components/schemas/ActionItemId'
        title:
          type: string
          description: The title of the action item.
        description:
          type: string
          description: The main action item content.
        priority:
          description: The action item priority.
          type: string
          enum:
            - low
            - medium
            - high
            - critical
        status:
          description: The action item status.
          type: string
          enum:
            - open
            - in_review
            - needs_corrections
            - hold
            - complete
        dueAt:
          description: The action item due date, if applicable.
          type: string
          format: date-time
        createdAt:
          description: The date the action item was created.
          type: string
          format: date-time
        updatedAt:
          description: The date the action item was last updated.
          type: string
          format: date-time
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentIri'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentIri'
    ActionItemCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/ActionItem"
            "@id":
              example: "/action-items"
            totalItems:
              type: integer
              description: The total number of action items.
              example: 5
            member:
              type: array
              description: A list of action items.
              items:
                $ref: '#/components/schemas/ActionItem'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/action-items?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/action-items?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/action-items?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/action-items?page=2"
    ActionItemId:
      description: The unique identifier of an action item.
      type: integer
    ActionItemIri:
      description: The unique JSON-LD IRI reference to the action item.
      type: string
      format: iri-reference
      example: '/action-items/1'
    AdderId:
      description: The unique identifier of an adder.
      type: integer
    AdderIri:
      description: The unique JSON-LD IRI reference to the adder.
      type: string
      format: iri-reference
      example: '/adders/1'
    Adder:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/AdderIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Adder
        id:
          $ref: '#/components/schemas/AdderId'
        name:
          type: string
        quantity:
          type: integer
        subtotal:
          type: number
    Address:
      type: object
      allOf:
        - $ref: '#/components/schemas/AddressCreate'
      properties:
        "@id":
          $ref: '#/components/schemas/AddressIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Address
        id:
          $ref: '#/components/schemas/AddressId'
        street:
          type: string
        address:
          description: A formatted address string.
          type: string
        lat:
          description: The address latitude coordinate.
          type: number
        lng:
          description: The address longitude coordinates.
          type: number
    AddressCreate:
      type: object
      required:
        - streetNumber
        - streetName
        - city
        - state
        - postCode
        - country
      properties:
        streetNumber:
          type: string
        streetName:
          type: string
        city:
          type: string
          maxLength: 60
          minLength: 3
        state:
          type: string
          maxLength: 2
          minLength: 2
        postCode:
          type: integer
          maxLength: 5
          minLength: 5
        country:
          type: string
          default: USA
          maxLength: 3
          minLength: 3
    AddressId:
      description: The unique identifier of an address.
      type: integer
    AddressIri:
      description: The unique JSON-LD IRI reference to the address.
      type: string
      format: iri-reference
      example: '/addresses/1'
    Application:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApplicationDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        primaryApplicant:
          $ref: '#/components/schemas/ApplicationApplicant'
        coApplicant:
          $ref: '#/components/schemas/ApplicationApplicant'
        creditReportTier:
          description: The highest credit report tier between both applicants.
          type: string
          enum:
            - declined
            - diamond
            - platinum
            - gold
            - silver
            - bronze
            - mercury
        status:
          $ref: '#/components/schemas/ApplicationStatus'
        team:
          type: object
          description: The team handling the proposed project.
          properties:
            dealer:
              description: The dealer handling the qualification application.
              $ref: '#/components/schemas/Dealer'
            installer:
              description: The installer handling the qualification application.
              $ref: '#/components/schemas/Installer'
            user:
              description: The sales rep handling the qualification application.
              $ref: '#/components/schemas/SalesRep'
        externalIdentifiers:
          type: array
          description: A list of external identifiers for the qualification application.
          items:
            $ref: '#/components/schemas/ExternalIdentifier'
    ApplicationAch:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        achAuthorizationStatus:
          $ref: '#/components/schemas/ApplicationAchStatus'
        achAuthorizationUrl:
          type: string
          format: uri
          description: A URL to complete the customer ACH authorization process.
        plaidLinkToken:
          type: string
          description: A token that can be used to initialize Plaid Link.
        achAuthorizationConsentHtml:
          type: string
          description: A consent that should be showed to the customer prior to ACH authorization in HTML.
        achAuthorizationConsentMarkdown:
          type: string
          description: A consent that should be showed to the customer prior to ACH authorization in markdown.
    ApplicationAchStatus:
      description: The customer qualification ACH authorization status.
      type: string
      enum:
        - complete
        - incomplete
    ApplicationAgreementType:
      description: The type of agreement being used.
      type: string
      enum:
        - ppa
        - lease
        - loan
    ApplicationAddress:
      type: object
      properties:
        streetNumber:
          type: string
          format: numeric
        streetName:
          type: string
        city:
          type: string
          minimum: 3
          maximum: 60
        state:
          type: string
          minimum: 2
          maximum: 2
        postCode:
          type: string
          format: numeric
          minimum: 5
          maximum: 5
        country:
          type: string
          format: numeric
          minimum: 3
          maximum: 3
    ApplicationApplicant:
      description: |-
        Complete demographic and contact information for a qualification applicant.
        This information is used for credit checks and identity verification.
      type: object
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - ssn
        - mobilePhone
        - currentAddress
      properties:
        firstName:
          description: |-
            Applicant's legal first name as it appears on government identification.
            Used for credit bureau matching and identity verification.
          type: string
          maxLength: 255
          minLength: 1
          example: "John"
        middleName:
          description: |-
            Optional middle name or initial. Can improve credit bureau matching accuracy.
          type: string
          maxLength: 255
          nullable: true
          example: "Michael"
        lastName:
          description: |-
            Applicant's legal last name as it appears on government identification.
            Used for credit bureau matching and identity verification.
          type: string
          maxLength: 255
          minLength: 1
          example: "Smith"
        email:
          description: |-
            Primary email address for account notifications and communications.
            Must be a valid, deliverable email address.
          type: string
          format: email
          maxLength: 255
          example: "john.smith@email.com"
        dateOfBirth:
          description: |-
            Applicant's date of birth in YYYY-MM-DD format.

            **Requirements:**
            - Must be at least 18 years old
            - Used for credit bureau identity verification
            - Must match government identification
          type: string
          format: date
          example: "1985-06-15"
        ssn:
          description: |-
            Last 4 digits of the applicant's Social Security Number.

            **Security Note:** Only the last 4 digits are collected for identity
            verification while maintaining privacy and security.

            **Format:** Exactly 4 numeric digits
          type: string
          pattern: '^\d{4}$'
          minLength: 4
          maxLength: 4
          example: "1234"
        mobilePhone:
          description: |-
            Primary mobile phone number for contact and verification.

            **Format Requirements:**
            - Must be a valid US phone number
            - Can include country code (+1)
            - Various formatting accepted: (555) 123-4567, 555-123-4567, 555.123.4567
          type: string
          format: tel
          pattern: '^(\+1\s?)?\(?[2-9]\d{2}\)?[\s.-]?\d{3}[\s.-]?\d{4}$'
          example: "+15551234567"
        homePhone:
          description: |-
            Optional home/landline phone number for additional contact options.
            Same format requirements as mobile phone.
          type: string
          format: tel
          pattern: '^(\+1\s?)?\(?[2-9]\d{2}\)?[\s.-]?\d{3}[\s.-]?\d{4}$'
          nullable: true
          example: "+15559876543"
        currentAddress:
          description: |-
            Current residential address where the applicant has lived.

            **Requirements:**
            - Must be a valid US address
            - Used for credit bureau verification
            - Required for all applicants
          $ref: '#/components/schemas/ApplicationAddress'
        previousAddress:
          description: |-
            Previous residential address if applicant has lived at current address
            for less than 2 years.

            **When Required:**
            - If current address residency is less than 24 months
            - Helps with credit bureau identity verification
            - Can improve qualification odds
          $ref: '#/components/schemas/ApplicationAddress'
          nullable: true
    ApplicationCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Application"
            "@id":
              example: "/applications"
            totalItems:
              type: integer
              description: The total number of qualification applications.
              example: 5
            member:
              type: array
              description: A list of qualification applications.
              items:
                $ref: '#/components/schemas/Application'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/applications?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/applications?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/applications?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/applications?page=2"
    ApplicationCreate:
      type: object
      description: Schema for creating a new solar financing qualification application.
      allOf:
        - $ref: '#/components/schemas/ApplicationDetails'
        - type: object
          required:
            - primaryApplicant
            - agreementType
            - productType
            - consent1
            - consent2
            - consent3
          properties:
            primaryApplicant:
              $ref: "#/components/schemas/ApplicationApplicant"
              description: |-
                Primary applicant information. This person will be the main contact
                and primary responsibility holder for the solar financing.
            coApplicant:
              $ref: "#/components/schemas/ApplicationApplicant"
              description: |-
                Optional co-applicant for joint applications. Adding a co-applicant
                can improve qualification odds by combining credit profiles.
                When provided, all co-applicant fields become required.
              nullable: true
            dealer:
              description: |-
                Create a new dealer record for this application. Use this when the dealer
                doesn't exist in the system yet. Cannot be used with `dealerId`.

                **Either `dealer` or `dealerId` must be provided.**
              allOf:
                - $ref: "#/components/schemas/DealerCreate"
              nullable: true
            dealerId:
              description: |-
                Reference to an existing dealer by ID. Use this when working with
                established dealer partners. Cannot be used with `dealer`.

                **Either `dealer` or `dealerId` must be provided.**
              type: integer
              minimum: 1
              nullable: true
              example: 123
            installer:
              description: |-
                Create a new installer record for this application. Use this when the
                installer doesn't exist in the system yet. Cannot be used with `installerId`.

                **Either `installer` or `installerId` must be provided.**
              allOf:
                - $ref: "#/components/schemas/InstallerCreate"
              nullable: true
            installerId:
              description: |-
                Reference to an existing installer by ID. Use this when working with
                established installer partners. Cannot be used with `installer`.

                **Either `installer` or `installerId` must be provided.**
              type: integer
              minimum: 1
              nullable: true
              example: 456
            user:
              description: |-
                Create a new sales representative record for this application. Use this
                when the sales rep doesn't exist in the system yet. Cannot be used with `userId`.

                **Either `user` or `userId` must be provided.**
              allOf:
                - $ref: "#/components/schemas/UserCreate"
              nullable: true
            userId:
              description: |-
                Reference to an existing sales representative by ID. Use this when working
                with established sales team members. Cannot be used with `user`.

                **Either `user` or `userId` must be provided.**
              type: integer
              minimum: 1
              nullable: true
              example: 789
            consent1:
              description: |-
                Customer consent for credit report authorization. Must be `true`.

                **Legal Requirement**: Customer must explicitly agree to credit checks.
              type: boolean
              enum: [true]
            consent2:
              description: |-
                Customer consent for terms and conditions. Must be `true`.

                **Legal Requirement**: Customer must agree to financing terms.
              type: boolean
              enum: [true]
            consent3:
              description: |-
                Customer consent for marketing communications. Must be `true`.

                **Legal Requirement**: Customer must agree to contact policies.
              type: boolean
              enum: [true]
            externalId:
              description: |-
                Optional external identifiers for integration with your systems.
                Useful for tracking applications across different platforms.

                **Common Use Cases:**
                - CRM system IDs
                - Proposal or quote numbers
                - Lead tracking identifiers
              type: array
              items:
                $ref: "#/components/schemas/ExternalIdentifierCreate"
              example:
                - key: "crm_lead_id"
                  value: "LEAD-12345"
                - key: "proposal_number"
                  value: "PROP-2024-001"
      example:
        referenceId: "PROP-2024-001"
        agreementType: "ppa"
        productType: "solar_storage"
        primaryApplicant:
          firstName: "John"
          lastName: "Smith"
          email: "john.smith@email.com"
          dateOfBirth: "1985-06-15"
          ssn: "1234"
          mobilePhone: "+15551234567"
          currentAddress:
            streetNumber: "123"
            streetName: "Main Street"
            city: "Phoenix"
            state: "AZ"
            postCode: "85001"
            country: "USA"
        dealerId: 123
        installerId: 456
        userId: 789
        consent1: true
        consent2: true
        consent3: true
    ApplicationDetails:
      type: object
      properties:
        referenceId:
          description: An optional application reference ID such as the proposal ID.
          type: string
          nullable: true
        agreementType:
          $ref: '#/components/schemas/ApplicationAgreementType'
        productType:
          $ref: '#/components/schemas/ApplicationProductType'
    ApplicationId:
      description: The unique identifier of a qualification application.
      type: integer
    ApplicationIri:
      description: The unique JSON-LD IRI reference to the qualification application.
      type: string
      format: iri-reference
      example: '/applications/1'
    ApplicationOpen:
      type: object
      properties:
        "@context":
          example: "/contexts/Application"
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: "#/components/schemas/ApplicationStatus"
          default: open
    ApplicationProductType:
      description: The type of product the customer is receiving.
      type: string
      enum:
        - solar
        - solar_storage
        - solar_storage_other
        - solar_other
        - storage
    ApplicationStatus:
      description: The customer qualification application status.
      type: string
      enum:
        - open
        - in_progress
        - submitted
        - approved
        - declined
        - none
        - onhold
        - cancelled
    ApplicationSubmit:
      type: object
      properties:
        "@context":
          example: "/contexts/Application"
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: "#/components/schemas/ApplicationStatus"
    ApplicationQualify:
      type: object
      properties:
        "@context":
          example: "/contexts/Application"
        "@id":
          $ref: '#/components/schemas/ApplicationIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Application
        id:
          $ref: '#/components/schemas/ApplicationId'
        status:
          $ref: "#/components/schemas/ApplicationStatus"
          default: in_progress
    Attachment:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/AttachmentIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Attachment
        id:
          $ref: '#/components/schemas/AttachmentId'
        name:
          type: string
          description: The name of the attachment.
        type:
          type: string
          description: The type of attachment.
          $ref: "#/components/schemas/AttachmentType"
        mime:
          type: string
          description: The attachment mime type.
        size:
          type: integer
          description: The size of the attachment in bytes.
        url:
          type: string
          format: uri
          description: A protected URL to download/view the attachment. All URLs will expire after a set amount of time.
        source:
          type: string
          description: The attachment source.
          $ref: "#/components/schemas/AttachmentSource"
    AttachmentCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Attachment"
            "@id":
              example: "/attachments"
            totalItems:
              type: integer
              description: The total number of attachments.
              example: 5
            member:
              type: array
              description: A list of attachments.
              items:
                $ref: '#/components/schemas/Attachment'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/attachments?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/attachments?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/attachments?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/attachments?page=2"
    AttachmentCreate:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          items:
            type: object
            required:
              - name
              - type
              - file
            properties:
              name:
                type: string
                maxLength: 255
                description: The name of the attachment.
              type:
                $ref: '#/components/schemas/AttachmentType'
              file:
                type: string
                format: binary
                description: 'The file to upload (max 10MB, allowed types: jpg, jpeg, png, pdf, docx).'
      description: >
        Create attachments by providing an array of files with their metadata.
        Each file requires a name, type, and file upload.
    AttachmentId:
      description: The unique identifier of an attachment.
      type: integer
    AttachmentIri:
      description: The unique JSON-LD IRI reference to the attachment.
      type: string
      format: iri-reference
      example: '/attachments/1'
    AttachmentSource:
      description: The location the attachment was provided from.
      type: string
      enum:
        - api
        - scanifly
        - sunobi
        - smithai
        - manual
    AttachmentType:
      description: The type of attachment.
      type: string
      enum:
        - ach_authorization
        - bom
        - contract
        - cpuc
        - credit_report
        - design
        - electrical_panel
        - final_inspection
        - install
        - interconnection
        - miscellaneous
        - monitoring
        - m1_verification_form
        - m2_verification_form
        - m3_verification_form
        - m4_verification_form
        - nem
        - other
        - permit
        - plan_set
        - procurement
        - property_document
        - pto
        - site_survey_photo
        - title_verification
        - true_up
        - ucc_filing
        - unknown
        - utility_bill
        - verification_call
    Comment:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/CommentIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Comment
        id:
          $ref: '#/components/schemas/CommentId'
        comment:
          description: The main comment content.
          type: string
        user:
          description: The comment's author.
          type: object
          allOf:
            - $ref: '#/components/schemas/Customer'
    CommentCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Comment"
            "@id":
              example: "/comments"
            totalItems:
              type: integer
              description: The total number of comments.
              example: 5
            member:
              type: array
              description: A list of comments.
              items:
                $ref: '#/components/schemas/Comment'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/comments?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/comments?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/comments?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/comments?page=2"
    CommentId:
      description: The unique identifier of a comment.
      type: integer
    CommentIri:
      description: The unique JSON-LD IRI reference to the comment.
      type: string
      format: iri-reference
      example: '/comments/1'
    Customer:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/UserIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: User
        id:
          $ref: '#/components/schemas/UserId'
        referenceId:
          type: string
          format: uuid
          description: The unique reference ID for this resource.
        name:
          description: The user's full name.
          type: string
    CustomerCreate:
      type: object
      required:
        - firstName
        - lastName
        - email
        - ssn
        - dateOfBirth
        - mobilePhone
      allOf:
        - $ref: '#/components/schemas/UserDetails'
      properties:
        middleName:
          description: The user's middle name.
          nullable: true
          type: string
        ssn:
          description: The user's last four of their SSN.
          type: string
          format: numeric
        dateOfBirth:
          description: The user's date of birth.
          type: string
          format: date
        mobilePhone:
          description: The user's mobile phone number.
          type: string
          format: tel
        homePhone:
          description: The user's home phone number.
          nullable: true
          type: string
          format: tel
        externalId:
          description: Optional external identifiers to add to the user.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    CustomerIri:
      description: The unique JSON-LD IRI reference to the customer.
      type: string
      format: iri-reference
      example: '/customers/1'
    Dealer:
      type: object
      allOf:
        - $ref: '#/components/schemas/DealerDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/DealerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Dealer
        id:
          $ref: '#/components/schemas/DealerId'
        referenceId:
          type: string
          format: uuid
          description: The unique reference ID for this resource.
        website:
          description: The dealer's website.
          type: string
          format: uri
        logoUrl:
          description: The dealer's logo.
          type: string
          format: uri
    DealerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Dealer"
            "@id":
              example: "/dealers"
            totalItems:
              type: integer
              description: The total number of dealers.
              example: 5
            member:
              type: array
              description: A list of dealers.
              items:
                $ref: '#/components/schemas/Dealer'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/dealers?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/dealers?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/dealers?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/dealers?page=2"
    DealerCreate:
      type: object
      required:
        - name
        - email
      allOf:
        - $ref: '#/components/schemas/DealerDetails'
      properties:
        externalId:
          description: Optional external identifiers to add to the dealer.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    DealerDetails:
      type: object
      properties:
        name:
          description: The name of the dealer.
          type: string
        email:
          description: A contact email for the dealer.
          type: string
          format: email
    DealerId:
      description: The unique identifier of a dealer.
      type: integer
    DealerIri:
      description: The unique JSON-LD IRI reference to the dealer.
      type: string
      format: iri-reference
      example: '/dealers/1'
    Design:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/DesignIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Design
        id:
          $ref: '#/components/schemas/DesignId'
        name:
          description: The name of the design.
          type: string
        systemSize:
          description: The size of the system is kW.
          type: number
        systemOffset:
          description: The system offset percentage.
          type: number
        asa:
          description: The system annular solar access.
          type: number
        annualProduction:
          description: The system production in kWh.
          type: number
        isPrimary:
          description: Whether or not this design is the primary design.
          type: boolean
        segments:
          description: A list of the design segments/arrays.
          type: array
          items:
            $ref: '#/components/schemas/Segment'
    DesignId:
      description: The unique identifier of a design.
      type: integer
    DesignIri:
      description: The unique JSON-LD IRI reference to the design.
      type: string
      format: iri-reference
      example: '/designs/1'
    Distributor:
      type: object
      allOf:
        - $ref: '#/components/schemas/DistributorDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/DistributorIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Distributor
        id:
          $ref: '#/components/schemas/DistributorId'
        referenceId:
          type: string
          format: uuid
          description: The unique reference ID for this resource.
        website:
          description: The distributor's website.
          type: string
          format: uri
        logoUrl:
          description: The distributor's logo.
          type: string
          format: uri
    DistributorCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Distributor"
            "@id":
              example: "/distributors"
            totalItems:
              type: integer
              description: The total number of distributors.
              example: 5
            member:
              type: array
              description: A list of distributors.
              items:
                $ref: '#/components/schemas/Distributor'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/distributors?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/distributors?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/distributors?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/distributors?page=2"
    DistributorCreate:
      type: object
      required:
        - name
        - email
      allOf:
        - $ref: '#/components/schemas/DistributorDetails'
      properties:
        externalId:
          description: Optional external identifiers to add to the distributor.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    DistributorDetails:
      type: object
      properties:
        name:
          description: The name of the distributor.
          type: string
        email:
          description: A contact email for the distributor.
          type: string
          format: email
    DistributorId:
      description: The unique identifier of a distributor.
      type: integer
    DistributorIri:
      description: The unique JSON-LD IRI reference to the distributor.
      type: string
      format: iri-reference
      example: '/distributors/1'
    Error:
      type: object
      properties:
        type:
          description: The IRI reference.
          type: string
          format: iri-reference
          example: '/errors/401'
        title:
          description: A human readable error message.
          type: string
        status:
          description: The HTTP status code.
          type: integer
        detail:
          description: More detailed error information.
          type: string
    ExternalIdentifierId:
      description: The unique identifier of an external identifier.
      type: integer
    ExternalIdentifier:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExternalIdentifierDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/ExternalIdentifierIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: ExternalIdentifier
        id:
          $ref: '#/components/schemas/ExternalIdentifierId'
    ExternalIdentifierCreate:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExternalIdentifierDetails'
      required:
        - key
        - value
    ExternalIdentifierDetails:
      type: object
      properties:
        key:
          type: string
          description: The key of the external identifier.
        value:
          type: string
          description: The value of the external identifier.
    ExternalIdentifierIri:
      description: The unique JSON-LD IRI reference to the external identifier.
      type: string
      format: iri-reference
      example: '/external-identifiers/1'
    HydraCollectionMetadata:
      type: object
      properties:
        "@context":
          type: string
          description: The JSON-LD context.
        "@id":
          type: string
          description: The JSON-LD unique IRI for the collection.
        "@type":
          type: string
          description: The JSON-LD type of the collection.
          example: Collection
    HydraView:
      type: object
      properties:
        "@id":
          type: string
          description: The identifier of the paginated view.
        "@type":
          type: string
          description: The JSON-LD type of the view.
          example: "PartialCollectionView"
        first:
          type: string
          description: The first page of the collection.
        last:
          type: string
          description: The last page of the collection.
        next:
          type: string
          description: The next page of the collection (if available).
    Installer:
      type: object
      allOf:
        - $ref: '#/components/schemas/InstallerDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/InstallerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Installer
        id:
          $ref: '#/components/schemas/InstallerId'
        referenceId:
          type: string
          format: uuid
          description: The unique reference ID for this resource.
        website:
          description: The installer's website.
          type: string
          format: uri
        logoUrl:
          description: The installer's logo.
          type: string
          format: uri
    InstallerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Installer"
            "@id":
              example: "/installers"
            totalItems:
              type: integer
              description: The total number of installers.
              example: 5
            member:
              type: array
              description: A list of installers.
              items:
                $ref: '#/components/schemas/Installer'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/installers?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/installers?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/installers?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/installers?page=2"
    InstallerCreate:
      type: object
      required:
        - name
        - email
      allOf:
        - $ref: '#/components/schemas/InstallerDetails'
      properties:
        externalId:
          description: Optional external identifiers to add to the installer.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    InstallerDetails:
      type: object
      properties:
        name:
          description: The name of the installer.
          type: string
        email:
          description: A contact email for the installer.
          type: string
          format: email
    InstallerId:
      description: The unique identifier of an installer.
      type: integer
    InstallerIri:
      description: The unique JSON-LD IRI reference to the installer.
      type: string
      format: iri-reference
      example: '/installers/1'
    Manufacturer:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ManufacturerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Manufacturer
        id:
          $ref: '#/components/schemas/ManufacturerId'
        name:
          description: The name of the manufacturer.
          type: string
    ManufacturerId:
      description: The unique identifier of a manufacturer.
      type: integer
    ManufacturerIri:
      description: The unique JSON-LD IRI reference to the manufacturer.
      type: string
      format: iri-reference
      example: '/manufacturers/1'
    Partner:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/PartnerIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Partner
        id:
          $ref: '#/components/schemas/PartnerId'
        referenceId:
          type: string
          format: uuid
          description: The unique reference ID for this resource.
        name:
          description: The name of the partner.
          type: string
        email:
          description: A contact email for the partner.
          type: string
          format: email
        website:
          description: The partner's website.
          type: string
          format: uri
    PartnerCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Partner"
            "@id":
              example: "/partners"
            totalItems:
              type: integer
              description: The total number of partners.
              example: 5
            member:
              type: array
              description: A list of partners.
              items:
                $ref: '#/components/schemas/Partner'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/partners?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/partners?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/partners?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/partners?page=2"
    PartnerId:
      description: The unique identifier of a partner.
      type: integer
    PartnerIri:
      description: The unique JSON-LD IRI reference to the partner.
      type: string
      format: iri-reference
      example: '/partners/1'
    Product:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ProductIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Product
        id:
          $ref: '#/components/schemas/ProductId'
        type:
          description: The type of product.
          type: string
          enum:
            - battery
            - inverter
            - miscellaneous
            - module
            - other
            - racking
            - roofing
        name:
          description: The name of the product.
          type: string
        description:
          description: A description of the product.
          type: string
        sku:
          description: The product SKU.
          type: string
        distributors:
          description: The distributors who offer this product.
          type: array
          items:
            $ref: "#/components/schemas/Distributor"
        manufacturer:
          description: The product manufacturer.
          type: object
          allOf:
            - $ref: '#/components/schemas/Manufacturer'
    ProductCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Product"
            "@id":
              example: "/products"
            totalItems:
              type: integer
              description: The total number of products.
              example: 5
            member:
              type: array
              description: A list of products.
              items:
                $ref: '#/components/schemas/Product'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/products?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/products?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/products?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/products?page=2"
            search:
              type: object
              description: Search parameters for filtering the product collection.
              properties:
                "@type":
                  type: string
                  example: "IriTemplate"
                template:
                  type: string
                  example: "/products/avl{?name,type}"
                variableRepresentation:
                  type: string
                  example: "BasicRepresentation"
                mapping:
                  type: array
                  items:
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: "IriTemplateMapping"
                      variable:
                        type: string
                      property:
                        type: string
    ProductId:
      description: The unique identifier of a product.
      type: integer
    ProductIri:
      description: The unique JSON-LD IRI reference to the product.
      type: string
      format: iri-reference
      example: '/products/1'
    Project:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/ProjectIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Project
        id:
          $ref: '#/components/schemas/ProjectId'
        proposalId:
          $ref: '#/components/schemas/ProjectProposalId'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        phase:
          $ref: '#/components/schemas/ProjectPhase'
        milestone:
          $ref: '#/components/schemas/ProjectMilestone'
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatus'
        productType:
          $ref: '#/components/schemas/ApplicationProductType'
        financials:
          description: The project financials.
          type: object
          properties:
            agreementType:
              $ref: '#/components/schemas/ApplicationAgreementType'
            totalContractValue:
              description: The total contract price.
              type: number
            totalPvValue:
              description: The total price of the PV system.
              type: number
            totalStorageValue:
              description: The total price of the storage system.
              type: number
            totalAdderValue:
              description: The total price of all adders.
              type: number
            amountFinanced:
              description: The amount financed by the customer.
              type: number
            monthlyPayment:
              description: The first year monthly payment for PV.
              type: number
            monthlyStoragePayment:
              description: The first year monthly payment for storage.
              type: number
            monthlyTotalPayment:
              description: The first year total monthly payment.
              type: number
            m2PaymentAmount:
              description: The M2 payment amount.
              type: number
            m3PaymentAmount:
              description: The M3 payment amount.
              type: number
            downPayment:
              description: The down payment required.
              type: number
            introductoryTerm:
              description: Only applicable if the agreement type is a loan.
              type: number
            introductoryPayment:
              description: Only applicable if the agreement type is a loan.
              type: number
            dealerFee:
              description: Only applicable if the agreement type is a loan.
              type: number
            apr:
              description: The escalator if a PPA or lease. The interest rate if a loan.
              type: number
            term:
              description: The agreement term length.
              type: number
            contractRate:
              description: The first year $/kWh price.
              type: number
            basePpw:
              description: The price per watt of the PV system.
              type: number
            adderPpw:
              description: The price per watt of just the project adders.
              type: number
            grossPpw:
              description: The sum of the base, storage and adder PPW values.
              type: number
            storagePpw:
              description: The price per watt of just the storage system.
              type: number
            federalRebate:
              type: number
            stateRebase:
              type: number
            utilityRebate:
              type: number
        milestones:
          description: The project milestones.
          type: object
          properties:
            m1:
              type: object
              properties:
                m1ReviewedAt:
                  type: string
                  format: date
                m1ApprovedAt:
                  type: string
                  format: date
                initialReviewStartedAt:
                  type: string
                  format: date
                initialReviewApprovedAt:
                  type: string
                  format: date
                agreementSignedAt:
                  type: string
                  format: date
                changeOrderAt:
                  type: string
                  format: date
                siteSurveyCompletedAt:
                  type: string
                  format: date
                ntpStartedAt:
                  type: string
                  format: date
                ntpCompletedAt:
                  type: string
                  format: date
                procurementApprovedAt:
                  type: string
                  format: date
                procurementPaymentSentAt:
                  type: string
                  format: date
                procurementShippedAt:
                  type: string
                  format: date
                procurementDeliveredAt:
                  type: string
                  format: date
                uccFiledAt:
                  type: string
                  format: date
                permitSubmittedAt:
                  type: string
                  format: date
                permitApprovedAt:
                  type: string
                  format: date
            m2:
              type: object
              properties:
                m2ReviewedAt:
                  type: string
                  format: date
                m2ApprovedAt:
                  type: string
                  format: date
                m2PaymentReady:
                  type: boolean
                m2PaymentSentAt:
                  type: string
                  format: date
                installScheduledAt:
                  type: string
                  format: date
                installCompletedAt:
                  type: string
                  format: date
            m3:
              type: object
              properties:
                m3ReviewedAt:
                  type: string
                  format: date
                m3ApprovedAt:
                  type: string
                  format: date
                m3PaymentReady:
                  type: boolean
                m3PaymentSentAt:
                  type: string
                  format: date
                finalInspectionScheduledAt:
                  type: string
                  format: date
                finalInspectionCompletedAt:
                  type: string
                  format: date
                ptoAt:
                  type: string
                  format: date
                startBillingAt:
                  type: string
                  format: date
        proposalLink:
          description: The link to the project proposal.
          type: string
        proposalDate:
          description: The date the proposal was generated.
          type: string
          format: date
        createdAt:
          description: The date the project was created.
          type: string
          format: date-time
        updatedAt:
          description: The date the project was last updated.
          type: string
          format: date-time
        address:
          description: The project address.
          type: object
          allOf:
            - $ref: '#/components/schemas/Address'
        design:
          description: The project's current primary design.
          type: object
          allOf:
            - $ref: '#/components/schemas/Design'
        customer:
          description: The project's customer.
          type: object
          allOf:
            - $ref: '#/components/schemas/Customer'
        dealer:
          description: The project's dealer.
          type: object
          allOf:
            - $ref: '#/components/schemas/Dealer'
        distributor:
          description: The project's distributor.
          type: object
          allOf:
            - $ref: '#/components/schemas/Distributor'
        installer:
          description: The project's distributor.
          type: object
          allOf:
            - $ref: '#/components/schemas/Installer'
        user:
          description: The project's sales rep.
          type: object
          allOf:
            - $ref: '#/components/schemas/SalesRep'
        actionItems:
          type: array
          description: The action items related to the project.
          items:
            $ref: '#/components/schemas/ActionItemIri'
        attachments:
          type: array
          description: The attachments related to the project.
          items:
            $ref: '#/components/schemas/AttachmentIri'
        comments:
          type: array
          description: The comments related to the project.
          items:
            $ref: '#/components/schemas/CommentIri'
        adders:
          type: array
          description: A list of adders for the project.
          items:
            $ref: '#/components/schemas/Adder'
        externalIdentifiers:
          type: array
          description: A list of external identifiers for the project.
          items:
            $ref: '#/components/schemas/ExternalIdentifier'
    ProjectCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Project"
            "@id":
              example: "/projects"
            totalItems:
              type: integer
              description: The total number of projects.
              example: 5
            member:
              type: array
              description: A list of projects.
              items:
                $ref: '#/components/schemas/Project'
            search:
              type: object
              description: Search parameters for filtering the project collection.
              properties:
                "@type":
                  type: string
                  example: "IriTemplate"
                template:
                  type: string
                  example: "/projects{?proposalId,status,phase,dealer,installer,user,customer,createdAt,updatedAt}"
                variableRepresentation:
                  type: string
                  example: "BasicRepresentation"
                mapping:
                  type: array
                  items:
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: "IriTemplateMapping"
                      variable:
                        type: string
                      property:
                        type: string
                  example:
                    - { "@type": "IriTemplateMapping", "variable": "proposalId", "property": "proposal_id" }
                    - { "@type": "IriTemplateMapping", "variable": "status", "property": "status" }
                    - { "@type": "IriTemplateMapping", "variable": "phase", "property": "phase" }
                    - { "@type": "IriTemplateMapping", "variable": "dealer", "property": "dealer" }
                    - { "@type": "IriTemplateMapping", "variable": "distributor", "property": "distributor" }
                    - { "@type": "IriTemplateMapping", "variable": "installer", "property": "installer" }
                    - { "@type": "IriTemplateMapping", "variable": "user", "property": "user" }
                    - { "@type": "IriTemplateMapping", "variable": "customer", "property": "customer" }
                    - { "@type": "IriTemplateMapping", "variable": "agreementType", "property": "agreementType" }
                    - { "@type": "IriTemplateMapping", "variable": "productType", "property": "productType" }
                    - { "@type": "IriTemplateMapping", "variable": "createdAt", "property": "created_at" }
                    - { "@type": "IriTemplateMapping", "variable": "updatedAt", "property": "updated_at" }
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/projects?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/projects?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/projects?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/projects?page=2"
    ProjectCreate:
      type: object
      description: |-
        Schema for creating a new solar installation project with complete financial terms,
        team assignments, and project specifications.
      allOf:
        - type: object
          required:
            - applicationId
            - address
            - customer
            - agreementType
            - productType
            - totalContractValue
            - amountFinanced
            - downPayment
            - term
            - proposalDate
          properties:
            applicationId:
              description: |-
                Reference to the approved qualification application this project is based on.

                **Requirements:**
                - Application must exist and be approved
                - Customer from application will be linked to this project
                - Credit qualification tier will carry forward

                **Business Rule:** One application can generate multiple projects
                (e.g., main system + later battery addition)
              type: integer
              minimum: 1
              example: 12345
            address:
              description: |-
                Physical address where the solar system will be installed.

                **Important:** This may differ from the customer's home address
                if installing on a secondary property, rental, or commercial building.

                **Used For:**
                - Permitting and utility coordination
                - Installation crew routing and scheduling
                - System design and shading analysis
                - Property value assessments
              allOf:
                - $ref: "#/components/schemas/AddressCreate"
            customer:
              description: |-
                Customer information for the solar installation project.

                **Backend Processing Logic:**
                1. **Customer Lookup**: System first searches for existing customer by email address
                2. **Found**: If customer exists, links to project (other fields can update existing record)
                3. **Not Found**: Creates new customer record with provided information

                **Data Sources:**
                - **From Application**: Usually copied from the referenced qualification application
                - **Updated Info**: May include refreshed customer details if information changed
                - **Different Customer**: For gift installations or third-party ownership

                **Required Information:**
                All customer fields are required in the API request for data completeness,
                but the system intelligently handles customer lookup and creation:

                - Legal name (must match contracts and agreements)
                - Email address (primary lookup key for existing customers)
                - Contact information for project coordination
                - SSN last 4 digits for identity verification
                - Current demographic and address information

                **Business Benefits:**
                - Prevents duplicate customer records
                - Maintains data consistency across applications and projects
                - Supports multiple projects per customer
                - Allows customer information updates
              allOf:
                - $ref: "#/components/schemas/CustomerCreate"
            dealer:
              description: |-
                Solar dealer/sales company responsible for the project.
                Create new dealer record if not already in the system.

                **Cannot be used with `dealerId`** - choose one approach.

                **Either `dealer` or `dealerId` must be provided.**

                **Dealer Responsibilities:**
                - Customer relationship and sales process
                - Contract execution and customer service
                - Sales commission and fee processing
                - Quality assurance and customer satisfaction
              allOf:
                - $ref: "#/components/schemas/DealerCreate"
              nullable: true
            dealerId:
              description: |-
                Reference to existing dealer by ID for established partnerships.

                **Cannot be used with `dealer`** - choose one approach.

                **Either `dealer` or `dealerId` must be provided.**

                **When to Use:** Working with existing dealer partners who are
                already registered in the system with established rates and terms.
              type: integer
              minimum: 1
              nullable: true
              example: 123
            installer:
              description: |-
                Solar installation company responsible for the physical installation.
                Create new installer record if not already in the system.

                **Cannot be used with `installerId`** - choose one approach.

                **Either `installer` or `installerId` must be provided.**

                **Installer Responsibilities:**
                - System design and engineering
                - Permitting and utility coordination
                - Physical installation and commissioning
                - Post-installation support and warranty
              allOf:
                - $ref: "#/components/schemas/InstallerCreate"
              nullable: true
            installerId:
              description: |-
                Reference to existing installer by ID for established partnerships.

                **Cannot be used with `installer`** - choose one approach.

                **Either `installer` or `installerId` must be provided.**

                **When to Use:** Working with certified installer partners who are
                already registered with verified credentials and service areas.
              type: integer
              minimum: 1
              nullable: true
              example: 456
            distributor:
              description: |-
                Optional equipment distributor for specialized procurement needs.

                **When Used:**
                - Specific equipment requirements or availability
                - Regional distributor relationships
                - Special pricing or warranty terms
                - Bulk purchasing coordination

                **Cannot be used with `distributorId`** - choose one approach.
              allOf:
                - $ref: "#/components/schemas/DistributorCreate"
              nullable: true
            distributorId:
              description: |-
                Reference to existing equipment distributor by ID.

                **Cannot be used with `distributor`** - choose one approach.

                **Common Use Cases:**
                - Regional distributor partnerships
                - Specialized equipment sourcing
                - Volume purchasing agreements
                - Logistics and delivery coordination
              type: integer
              minimum: 1
              nullable: true
              example: 789
            user:
              description: |-
                Sales representative responsible for the customer relationship.
                Create new user record if not already in the system.

                **Cannot be used with `userId`** - choose one approach.

                **Either `user` or `userId` must be provided.**

                **Sales Rep Responsibilities:**
                - Primary customer contact and relationship
                - Project coordination and communication
                - Commission and compensation tracking
                - Customer service and issue resolution
              allOf:
                - $ref: "#/components/schemas/UserCreate"
              nullable: true
            userId:
              description: |-
                Reference to existing sales representative by ID.

                **Cannot be used with `user`** - choose one approach.

                **Either `user` or `userId` must be provided.**

                **When to Use:** Assigning projects to established sales team
                members with existing customer relationships and commission structures.
              type: integer
              minimum: 1
              nullable: true
              example: 101112
            externalId:
              description: |-
                Optional external system identifiers for integration and tracking.

                **Common Integration Use Cases:**
                - CRM system project IDs
                - Proposal and design tool references
                - ERP system project numbers
                - Customer portal tracking IDs
                - Third-party platform connections
              type: array
              items:
                $ref: "#/components/schemas/ExternalIdentifierCreate"
              example:
                - key: "crm_project_id"
                  value: "PROJ-2024-001"
                - key: "proposal_id"
                  value: "PROP-12345"
            agreementType:
              description: |-
                Type of solar financing agreement for this project.

                **Agreement Types:**
                - `ppa`: Power Purchase Agreement - customer buys energy produced
                - `lease`: Solar lease - customer leases equipment with fixed payments
                - `loan`: Solar loan - customer finances equipment purchase

                **Required Fields by Type:**
                - **Loan**: `introductoryTerm`, `introductoryPayment`, `dealerFee`, `interestRate`
                - **PPA**: `contractRate`, `escalator`
                - **Lease**: Similar to loan with different rate structures
              allOf:
                - $ref: '#/components/schemas/ApplicationAgreementType'
            productType:
              description: |-
                Type of solar energy system being installed.

                **Product Types:**
                - `solar`: Solar panels only
                - `solar_storage`: Solar panels with battery storage
                - `solar_storage_other`: Solar + storage + additional products
                - `solar_other`: Solar panels with other add-ons
                - `storage`: Battery storage only (rare)

                **Impact:** Affects pricing, rebates, and installation complexity
              allOf:
                - $ref: '#/components/schemas/ApplicationProductType'
            totalContractValue:
              description: |-
                Total dollar value of the solar installation contract.

                **Includes:**
                - Solar equipment (panels, inverters, racking)
                - Battery storage (if applicable)
                - Installation labor and materials
                - Permits, inspections, and utility connections
                - Equipment add-ons and upgrades
                - Sales tax and fees

                **Business Rules:**
                - Must be greater than or equal to `amountFinanced`
                - Used for pricing calculations ($/watt metrics)
                - Determines rebate and tax credit amounts
              type: number
              format: currency
              minimum: 0
              example: 25000.00
            amountFinanced:
              description: |-
                Dollar amount being financed through Elios Fund.

                **Calculation:** `totalContractValue` - `downPayment` = `amountFinanced`

                **Business Rules:**
                - Cannot exceed `totalContractValue`
                - Must be greater than or equal to `downPayment`
                - Determines monthly payment calculations
                - Subject to qualification limits based on credit tier

                **Common Scenarios:**
                - 100% financing: `amountFinanced` = `totalContractValue`, `downPayment` = 0
                - Partial financing: Customer pays down payment, finances remainder
              type: number
              format: currency
              minimum: 0
              example: 20000.00
            downPayment:
              description: |-
                Customer down payment amount paid at contract signing.

                **Business Rules:**
                - Cannot exceed `amountFinanced`
                - Reduces total financing amount and monthly payments
                - Often used to lower monthly payments or improve qualification

                **Common Amounts:**
                - $0 for 100% financing (most common)
                - $2,000-$5,000 for payment reduction
                - 10-20% of total for traditional financing
              type: number
              format: currency
              minimum: 0
              example: 5000.00
            dealerFee:
              description: |-
                Dealer fee percentage for loan products (decimal format).

                **Required for:** `agreementType: loan`

                **Format:** Decimal (0.05 = 5%)

                **Business Context:**
                - Compensation paid to dealer for loan origination
                - Typically 2-8% of financed amount
                - Built into customer pricing
                - Affects dealer profitability and customer rates
              type: number
              format: percentage
              minimum: 0
              maximum: 1
              example: 0.055
            interestRate:
              description: |-
                Annual interest rate for loan products (decimal format).

                **Required for:** `agreementType: loan`

                **Format:** Decimal (0.0599 = 5.99% APR)

                **Business Context:**
                - Customer's borrowing rate based on credit qualification
                - Affects monthly payment calculations
                - May include introductory/promotional periods
                - Determines total cost of financing over loan term
              type: number
              format: percentage
              minimum: 0
              maximum: 1
              example: 0.0599
            contractRate:
              description: |-
                First-year energy rate for PPA products ($/kWh in decimal format).

                **Required for:** `agreementType: ppa`

                **Format:** Decimal dollars per kWh (0.1742 = $0.1742/kWh)

                **Business Context:**
                - Rate customer pays for solar energy produced
                - Typically lower than utility rates
                - Escalates annually based on `escalator` percentage
                - Determines customer savings and project economics
              type: number
              format: rate
              minimum: 0
              maximum: 1
              example: 0.1742
            escalator:
              description: |-
                Annual rate increase percentage for PPA/lease products (decimal format).

                **Required for:** `agreementType: ppa`

                **Format:** Decimal (0.0299 = 2.99% annual increase)

                **Business Context:**
                - Annual increase in energy rate or lease payment
                - Typically 0-4% per year
                - Accounts for inflation and operational costs
                - Lower escalators = better customer value
              type: number
              format: percentage
              minimum: 0
              maximum: 1
              example: 0.0299
            term:
              description: |-
                Agreement length in years.

                **Common Terms:**
                - **25 years**: Standard for PPAs and leases
                - **20 years**: Common for loans
                - **12-15 years**: Short-term loan options

                **Business Impact:**
                - Longer terms = lower monthly payments
                - Affects equipment warranty coverage
                - Determines total project economics
                - Must align with equipment design life
              type: integer
              minimum: 1
              maximum: 25
              example: 25
            proposalId:
              description: |-
                Optional reference to the original sales proposal.

                **Use Cases:**
                - Link to design and pricing tools
                - Sales process tracking and reporting
                - Commission calculations
                - Customer communication reference
              type: integer
              minimum: 1
              nullable: true
              example: 98765
            proposalDate:
              description: |-
                Date when the proposal was presented to the customer.

                **Business Uses:**
                - Sales cycle tracking and reporting
                - Pricing validity periods
                - Commission qualification dates
                - Customer communication timeline

                **Required Field** for project tracking and reporting.
              type: string
              format: date
              example: "2024-03-15"
            proposalLink:
              description: |-
                Optional URL link to the customer proposal document.

                **Common Sources:**
                - Design tool proposal exports (Aurora, HelioScope)
                - Sales presentation platforms
                - Customer portal links
                - Document management systems

                **Customer Access:** Often shared with customers for reference
              type: string
              format: uri
              nullable: true
              example: "https://portal.example.com/proposals/12345"
            introductoryTerm:
              description: |-
                Length of introductory/promotional payment period in months.

                **Required for:** `agreementType: loan`

                **Common Terms:**
                - 18 months (most popular)
                - 12 months (shorter promotion)
                - 24-36 months (extended promotions)

                **Business Purpose:**
                - Lower initial payments to improve qualification
                - Marketing incentive for customer acquisition
                - Cash flow management for customers
              type: integer
              minimum: 0
              maximum: 36
              example: 18
            introductoryPayment:
              description: |-
                Monthly payment amount during introductory period.

                **Required for:** `agreementType: loan`

                **Common Values:**
                - $0 (no-payment promotion)
                - $89-$149 (reduced payment)
                - 50% of regular payment (partial reduction)

                **After Intro Period:** Payments increase to regular amortized amount
              type: number
              format: currency
              minimum: 0
              example: 89.00
            adders:
              description: |-
                Optional equipment add-ons and upgrades beyond the base solar system.

                **Common Adders:**
                - Electrical panel upgrades
                - Roof repairs or reinforcements
                - Trenching and conduit runs
                - Monitoring system upgrades
                - Extended warranties
                - Smart home integrations

                **Pricing Impact:** Adds to total contract value and affects $/watt calculations
              type: array
              items:
                type: object
                required:
                  - name
                  - quantity
                  - subtotal
                properties:
                  name:
                    description: Name/description of the equipment add-on
                    type: string
                    example: "Electrical Panel Upgrade"
                  quantity:
                    description: Number of units being installed
                    type: integer
                    minimum: 1
                    example: 1
                  subtotal:
                    description: Total cost for this add-on (quantity × unit price)
                    type: number
                    format: currency
                    minimum: 0
                    example: 2500.00
      example:
        applicationId: 12345
        customer:
          firstName: "John"
          lastName: "Smith"
          email: "john.smith@email.com"
          dateOfBirth: "1985-06-15"
          ssn: "1234"
          mobilePhone: "+15551234567"
        address:
          streetNumber: "789"
          streetName: "Solar Avenue"
          city: "Phoenix"
          state: "AZ"
          postCode: "85001"
          country: "USA"
        agreementType: "loan"
        productType: "solar_storage"
        totalContractValue: 35000.00
        amountFinanced: 30000.00
        downPayment: 5000.00
        dealerFee: 0.055
        interestRate: 0.0599
        term: 20
        introductoryTerm: 18
        introductoryPayment: 149.00
        proposalDate: "2024-03-15"
        proposalId: 98765
        proposalLink: "https://portal.example.com/proposals/98765"
        dealerId: 123
        installerId: 456
        userId: 101112
        externalId:
          - key: "crm_project_id"
            value: "PROJ-2024-001"
          - key: "design_tool_id"
            value: "AURORA-12345"
        adders:
          - name: "Electrical Panel Upgrade"
            quantity: 1
            subtotal: 2500.00
          - name: "Roof Reinforcement"
            quantity: 1
            subtotal: 1500.00
    ProjectId:
      description: The unique identifier of a project.
      type: integer
    ProjectIri:
      description: The unique JSON-LD IRI reference to the project.
      type: string
      format: iri-reference
      example: '/projects/1'
    ProjectMilestone:
      description: The current project milestone.
      type: string
      enum:
        - m1
        - m2
        - m3
    ProjectPhase:
      description: The current project phase.
      type: string
      enum:
        - commissioning
        - customer_survey
        - design
        - final_payment
        - first_payment
        - initial_review
        - inspection
        - install
        - install_qa
        - interconnection
        - ntp_approval
        - permitting
        - procurement
        - pto
        - rebates
        - sale
        - site_survey
    ProjectProposalId:
      description: A second unique identifier of a project.
      type: integer
    ProjectStatus:
      description: The current project status.
      type: string
      enum:
        - new
        - in_progress
        - on_hold
        - complete
        - cancelled
        - stale
    SalesRep:
      type: object
      allOf:
        - $ref: '#/components/schemas/UserDetails'
      properties:
        "@id":
          $ref: '#/components/schemas/UserIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: User
        id:
          $ref: '#/components/schemas/UserId'
        referenceId:
          type: string
          format: uuid
          description: The unique reference ID for this resource.
        name:
          type: string
    Segment:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/SegmentIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Segment
        id:
          $ref: '#/components/schemas/SegmentId'
        name:
          description: The name of the segment.
          type: string
        moduleQuantity:
          description: The number of modules in the segment.
          type: integer
        arrayType:
          description: The type of array.
          type: string
          enum:
            - Fixed - Ground Mounted
            - Fixed - Roof Mounted
        azimuth:
          description: The array azimuth.
          type: number
        tilt:
          description: The array tilt in degrees.
          type: number
        shading:
          description: The array shading.
          type: number
        products:
          description: The products the array is constructed from.
          type: array
          items:
            $ref: '#/components/schemas/Product'
    SegmentId:
      description: The unique identifier of a segment.
      type: integer
    SegmentIri:
      description: The unique JSON-LD IRI reference to the segment.
      type: string
      format: iri-reference
      example: '/segments/1'
    SystemPricingFactorYear:
      type: object
      properties:
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: SystemPricingFactorYear
        year:
          description: The pricing year.
          type: integer
        productionKWh:
          description: The annual system production for the year.
          type: number
        ratePerKWh:
          description: The electric rate for the year.
          type: number
        pvMonthlyPayment:
          description: The monthly payment for just the PV system.
          type: number
        storageMonthlyPayment:
          description: The monthly payment for just the storage system.
          type: number
        totalMonthlyPayment:
          description: The total combined monthly payment.
          type: number
        pvAnnualPayment:
          description: The annual cost for just the PV system.
          type: number
        storageAnnualPayment:
          description: The annual cost for just the storage system.
          type: number
        totalAnnualPayment:
          description: The total combined annual cost.
          type: number
    SystemPricingFactorYearCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/SystemPricingFactorYear"
            "@id":
              example: "/pricing"
            totalItems:
              type: integer
              description: The total number of years calculated.
              example: 25
            member:
              type: array
              description: The pricing for a system over the duration of the contract.
              items:
                $ref: '#/components/schemas/SystemPricingFactorYear'
    SystemPricingFactorYearCreate:
      type: object
      required:
        - systemSize
        - annualProduction
        - degradationRate
        - escalator
        - contractRate
      properties:
        systemSize:
          type: number
          description: The system size in kW.
          example: 10.25
        annualProduction:
          type: number
          description: The annual system production in kWh.
          example: 16245
        degradationRate:
          type: number
          description: The degradation rate of the module being used. Typically around 0.5%.
          example: 0.005
          maximum: 1
          minimum: 0
        escalator:
          type: number
          description: The contract escalator.
          example: 0.0299
          maximum: 1
          minimum: 0
        contractRate:
          description: The first year $/kWh price.
          example: 0.1742
          type: number
          maximum: 1
          minimum: 0
    UserCreate:
      type: object
      required:
        - firstName
        - lastName
        - email
      allOf:
        - $ref: '#/components/schemas/UserDetails'
      properties:
        externalId:
          description: Optional external identifiers to add to the user.
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifierCreate'
    UserDetails:
      type: object
      properties:
        firstName:
          description: The user's first name.
          type: string
        lastName:
          description: The user's last name.
          type: string
        email:
          description: The users's email.
          type: string
          format: email
    UserId:
      description: The unique identifier of a user.
      type: integer
    UserIri:
      description: The unique JSON-LD IRI reference to the user.
      type: string
      format: iri-reference
      example: '/users/1'
    Webhook:
      type: object
      properties:
        "@id":
          $ref: '#/components/schemas/WebhookIri'
        "@type":
          type: string
          description: The JSON-LD resource type.
          example: Webhook
        id:
          $ref: '#/components/schemas/WebhookId'
        url:
          description: The URL the webhook request will be sent to.
          type: string
          format: uri
        enabled:
          description: Whether or not the webhook is enabled.
          type: boolean
          default: true
        method:
          description: The HTTP method that will be used.
          type: string
          enum:
            - get
            - post
        events:
          description: The events that will trigger the webhook to send.
          type: array
          items:
            $ref: '#/components/schemas/WebhookEvent'
    WebhookEvent:
      description: The type of event that triggers the webhook.
      type: string
      enum:
        - application.created
        - application.updated
        - application.deleted
        - project.created
        - project.updated
        - project.deleted
        - project.phase.updated
        - project.status.updated
        - user.created
        - user.updated
        - user.deleted
    WebhookCollection:
      type: object
      allOf:
        - $ref: '#/components/schemas/HydraCollectionMetadata'
        - type: object
          properties:
            "@context":
              example: "/contexts/Webhook"
            "@id":
              example: "/webhooks"
            totalItems:
              type: integer
              description: The total number of webhooks.
              example: 5
            member:
              type: array
              description: A list of webhooks.
              items:
                $ref: '#/components/schemas/Webhook'
            view:
              allOf:
                - $ref: '#/components/schemas/HydraView'
                - type: object
                  properties:
                    "@id":
                      description: The identifier of the paginated view.
                      example: "/webhooks?page=1"
                    first:
                      description: The first page of the collection.
                      example: "/webhooks?page=1"
                    last:
                      description: The last page of the collection.
                      example: "/webhooks?page=5"
                    next:
                      description: The next page of the collection (if available).
                      example: "/webhooks?page=2"
    WebhookId:
      description: The unique identifier of a webhook.
      type: integer
    WebhookIri:
      description: The unique JSON-LD IRI reference to the webhook.
      type: string
      format: iri-reference
      example: '/webhooks/1'
  securitySchemes:
    ApiKey:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://partners.eliosfund.com/oauth/authorize
          tokenUrl: https://partners.eliosfund.com/oauth/token
          refreshUrl: https://partners.eliosfund.com/oauth/refresh
          scopes:
            create:applications: Can create a qualification application
            create:attachments: Can create attachments
            create:projects: Can create projects
            manage:webhooks: Can manage webhooks
            qualify:applications: Can submit an application for qualification
            update:applications: Can update a qualification application
            update:projects: Can update a project
            view:action:items: Can view action items
            view:addresses: Can view addresses
            view:applications: Can view applications
            view:attachments: Can view attachments
            view:comments: Can view comments
            view:dealers: Can view dealers
            view:distributors: Can view distributors
            view:installers: Can view installers
            view:partners: Can view partners
            view:projects: Can view projects
            view:users: Can view users
        clientCredentials:
          tokenUrl: https://partners.eliosfund.com/oauth/token
          scopes:
            create:applications: Can create a qualification application
            create:attachments: Can create attachments
            create:projects: Can create projects
            manage:webhooks: Can manage webhooks
            qualify:applications: Can submit an application for qualification
            update:applications: Can update a qualification application
            update:projects: Can update a project
            view:action:items: Can view action items
            view:addresses: Can view addresses
            view:applications: Can view applications
            view:attachments: Can view attachments
            view:comments: Can view comments
            view:dealers: Can view dealers
            view:distributors: Can view distributors
            view:installers: Can view installers
            view:partners: Can view partners
            view:projects: Can view projects
            view:users: Can view users
security:
  - ApiKey: []
  - OAuth: []
